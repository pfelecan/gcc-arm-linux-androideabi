--- a/android/device/linaro/pandaboard/BoardConfig.mk
+++ b/android/device/linaro/pandaboard/BoardConfig.mk
@@ -28,7 +28,6 @@
 OMAP_ENHANCEMENT := true
 HARDWARE_OMX := false
 USE_CAMERA_STUB := true
-INCLUDE_PERF := 0
 
 BOARD_HAVE_BLUETOOTH := true
 BOARD_HAVE_BLUETOOTH_BCM := true
--- a/android/device/linaro/common/disablesuspend.sh
+++ /dev/null
@@ -1,17 +0,0 @@
-#!/system/bin/sh
-#
-# Author: Linaro Validation Team <linaro-dev@lists.linaro.org>
-#
-# These files are Copyright (C) 2012 Linaro Limited and they
-# are licensed under the Apache License, Version 2.0.
-# You may obtain a copy of this license at
-# http://www.apache.org/licenses/LICENSE-2.0
-
-    stay_awake="delete from system where name='stay_on_while_plugged_in'; insert into system (name, value) values ('stay_on_while_plugged_in','3');"
-    screen_sleep="delete from system where name='screen_off_timeout'; insert into system (name, value) values ('screen_off_timeout','-1');"
-    lockscreen="delete from secure where name='lockscreen.disabled'; insert into secure (name, value) values ('lockscreen.disabled','1');"
-    sqlite3 /data/data/com.android.providers.settings/databases/settings.db "${stay_awake}" ## set stay awake
-    sqlite3 /data/data/com.android.providers.settings/databases/settings.db "${screen_sleep}" # set sleep to none
-    sqlite3 /data/data/com.android.providers.settings/databases/settings.db "${lockscreen}" ##set lock screen to none
-    input keyevent 82  ##unlock the home screen
-    service call power 1 i32 26 ##acquireWakeLock FULL_WAKE_LOCK
--- a/android/device/linaro/common/common.mk
+++ b/android/device/linaro/common/common.mk
@@ -1,19 +1,10 @@
 # stuff common to all Linaro LEB
 include $(LOCAL_PATH)/ZeroXBenchmark.mk
 
-ifneq ($(wildcard $(TOP)/packages/apps/AndroidTerm/Android.mk),)
-# Include AndroidTerm only if it's part of the manifest
-ANDROIDTERM := AndroidTerm libjackpal-androidterm4
-endif
-ifneq ($(wildcard $(TOP)/packages/inputmethods/hackerskeyboard/Android.mk),)
-HACKERSKEYBOARD := PCKeyboard
-endif
-
 PRODUCT_PACKAGES := \
     AccountAndSyncSettings \
     AlarmClock \
     AlarmProvider \
-    $(ANDROIDTERM) \
     Bluetooth \
     Calculator \
     Calendar \
@@ -26,83 +17,14 @@
     Launcher2 \
     Mms \
     Music \
-    $(HACKERSKEYBOARD) \
     Provision \
     Settings \
-    SystemUI \
     Sync \
     Updater \
     CalendarProvider \
     SyncProvider \
-    faketsd \
     ZeroXBenchmark \
-    hwcomposer.default \
     libmicro \
-    powertop \
-    mmtest \
-    $(ZEROXBENCHMARK_NATIVE_APPS) \
-    GLMark2 \
-    libglmark2-android \
-    gatord \
-    LinaroWallpaper \
-    LiveWallpapers \
-    LiveWallpapersPicker \
-    MagicSmokeWallpapers \
-    VisualizationWallpapers \
-    librs_jni \
-    mediaframeworktest \
-    libtinyalsa \
-    tinyplay \
-    tinycap \
-    tinymix \
-    libaudioutils \
-    ConnectivityManagerTest \
-    iozone \
-    memtester \
-    stress \
-    stressapptest \
-    DisableSuspend \
-    libncurses \
-    htop \
-    cyclictest \
-    sysbench
-
-#packages we are using for benchmarking
-PRODUCT_PACKAGES += \
-    v8shell \
-    skia_bench
-
-V8BENCHMARKS := $(foreach js,$(wildcard $(TOP)/external/v8/benchmarks/*.js),\
-	$(js):data/benchmark/v8/$(notdir $(js)))
-
-PRODUCT_COPY_FILES := \
-	device/linaro/common/wallpaper_info.xml:data/system/wallpaper_info.xml \
-	device/linaro/common/disablesuspend.sh:system/bin/disablesuspend.sh \
-	$(V8BENCHMARKS)
-
-define copy-howto
-ifneq ($(wildcard $(TOP)/device/linaro/common/howto/$(LINARO_BUILD_SPEC)/$1),)
-PRODUCT_COPY_FILES += \
-	device/linaro/common/howto/$(LINARO_BUILD_SPEC)/$1:howto/$1
-else
-ifneq ($(wildcard $(TOP)/device/linaro/common/howto/default/$1),)
-PRODUCT_COPY_FILES += \
-	device/linaro/common/howto/default/$1:howto/$1
-endif
-endif
-endef
-
-HOWTOS := \
-	OPEN-EULA.txt \
-	HOWTO_install.txt \
-	HOWTO_getsourceandbuild.txt \
-	HOWTO_flashfirmware.txt \
-	HOWTO_releasenotes.txt \
-	HOWTO_rtsm.txt
-
-PRODUCT_COPY_FILES += \
-        device/linaro/common/media_codecs.xml:system/etc/media_codecs.xml
-
-$(foreach howto,$(HOWTOS),$(eval $(call copy-howto,$(howto))))
+    $(ZEROXBENCHMARK_NATIVE_APPS)
 
 $(call inherit-product, $(SRC_TARGET_DIR)/product/core.mk)
--- a/android/device/linaro/common/init.partitions-with-kernelpartition.rc
+++ /dev/null
@@ -1,10 +0,0 @@
-# Mount MMC partitions
-on fs
-	# mmcblk0p1: Kernel/bootloader partition
-	# mmcblk0p2: /boot
-	mount ext4 /dev/block/mmcblk0p3 /system wait ro
-	chmod 0755 /system
-	# mmcblk0p4: extended partition container
-	mount ext4 /dev/block/mmcblk0p5 /cache wait
-	mount ext4 /dev/block/mmcblk0p6 /data wait
-	# mmcblk0p7: /sdcard
--- a/android/device/linaro/common/wpa_supplicant.conf
+++ /dev/null
@@ -1,6 +0,0 @@
-##### wpa_supplicant configuration file template #####
-update_config=1
-ctrl_interface=wlan0
-eapol_version=1
-ap_scan=1
-fast_reauth=1
--- a/android/device/linaro/common/NOTICE
+++ /dev/null
@@ -1,5 +0,0 @@
-These files are Copyright (C) 2011-2012 Linaro Limited and they
-are licensed under the Apache License, Version 2.0.
-You may obtain a copy of this license at
-http://www.apache.org/licenses/LICENSE-2.0
-
--- a/android/device/linaro/common/init.partitions.rc
+++ /dev/null
@@ -1,9 +0,0 @@
-# Mount MMC partitions
-on fs
-	# mmcblk0p1: /boot
-	mount ext4 /dev/block/mmcblk0p2 /system wait ro
-	chmod 0755 /system
-	mount ext4 /dev/block/mmcblk0p3 /cache wait
-	# mmcblk0p4: extended partition container
-	mount ext4 /dev/block/mmcblk0p5 /data wait
-	# mmcblk0p6: /sdcard
--- a/android/device/linaro/common/android.hardware.bluetooth.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (C) 2009 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-  
-          http://www.apache.org/licenses/LICENSE-2.0
-  
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<!-- This is the standard feature indicating that the device includes WiFi. -->
-<permissions>
-    <feature name="android.hardware.bluetooth" />
-</permissions>
--- a/android/device/linaro/common/wallpaper_info.xml
+++ /dev/null
@@ -1,2 +0,0 @@
-<?xml version='1.0' encoding='utf-8' standalone='yes' ?>
-<wp width="2160" height="1920" name="" component="org.linaro.wallpaper/.LogoWallpaper" />
--- a/android/device/linaro/common/media_codecs.xml
+++ /dev/null
@@ -1,100 +0,0 @@
-<?xml version="1.0" encoding="utf-8" ?>
-<!-- Copyright (C) 2012 The Android Open Source Project
-
-     Licensed under the Apache License, Version 2.0 (the "License");
-     you may not use this file except in compliance with the License.
-     You may obtain a copy of the License at
-
-          http://www.apache.org/licenses/LICENSE-2.0
-
-     Unless required by applicable law or agreed to in writing, software
-     distributed under the License is distributed on an "AS IS" BASIS,
-     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-     See the License for the specific language governing permissions and
-     limitations under the License.
--->
-
-<!--
-<!DOCTYPE MediaCodecs [
-<!ELEMENT MediaCodecs (Decoders,Encoders)>
-<!ELEMENT Decoders (MediaCodec*)>
-<!ELEMENT Encoders (MediaCodec*)>
-<!ELEMENT MediaCodec (Type*,Quirk*)>
-<!ATTLIST MediaCodec name CDATA #REQUIRED>
-<!ATTLIST MediaCodec type CDATA>
-<!ELEMENT Type EMPTY>
-<!ATTLIST Type name CDATA #REQUIRED>
-<!ELEMENT Quirk EMPTY>
-<!ATTLIST Quirk name CDATA #REQUIRED>
-]>
-
-There's a simple and a complex syntax to declare the availability of a
-media codec:
-
-A codec that properly follows the OpenMax spec and therefore doesn't have any
-quirks and that only supports a single content type can be declared like so:
-
-    <MediaCodec name="OMX.foo.bar" type="something/interesting" />
-
-If a codec has quirks OR supports multiple content types, the following syntax
-can be used:
-
-    <MediaCodec name="OMX.foo.bar" >
-        <Type name="something/interesting" />
-        <Type name="something/else" />
-        ...
-        <Quirk name="requires-allocate-on-input-ports" />
-        <Quirk name="requires-allocate-on-output-ports" />
-        <Quirk name="output-buffers-are-unreadable" />
-    </MediaCodec>
-
-Only the three quirks included above are recognized at this point:
-
-"requires-allocate-on-input-ports"
-    must be advertised if the component does not properly support specification
-    of input buffers using the OMX_UseBuffer(...) API but instead requires
-    OMX_AllocateBuffer to be used.
-
-"requires-allocate-on-output-ports"
-    must be advertised if the component does not properly support specification
-    of output buffers using the OMX_UseBuffer(...) API but instead requires
-    OMX_AllocateBuffer to be used.
-
-"output-buffers-are-unreadable"
-    must be advertised if the emitted output buffers of a decoder component
-    are not readable, i.e. use a custom format even though abusing one of
-    the official OMX colorspace constants.
-    Clients of such decoders will not be able to access the decoded data,
-    naturally making the component much less useful. The only use for
-    a component with this quirk is to render the output to the screen.
-    Audio decoders MUST NOT advertise this quirk.
-    Video decoders that advertise this quirk must be accompanied by a
-    corresponding color space converter for thumbnail extraction,
-    matching surfaceflinger support that can render the custom format to
-    a texture and possibly other code, so just DON'T USE THIS QUIRK.
-
--->
-
-<MediaCodecs>
-    <Decoders>
-        <MediaCodec name="OMX.google.mp3.decoder" type="audio/mpeg" />
-        <MediaCodec name="OMX.google.amrnb.decoder" type="audio/3gpp" />
-        <MediaCodec name="OMX.google.amrwb.decoder" type="audio/amr-wb" />
-        <MediaCodec name="OMX.google.aac.decoder" type="audio/mp4a-latm" />
-        <MediaCodec name="OMX.google.g711.alaw.decoder" type="audio/g711-alaw" />
-        <MediaCodec name="OMX.google.g711.mlaw.decoder" type="audio/g711-mlaw" />
-        <MediaCodec name="OMX.google.vorbis.decoder" type="audio/vorbis" />
-
-        <MediaCodec name="OMX.google.mpeg4.decoder" type="video/mp4v-es" />
-        <MediaCodec name="OMX.google.h263.decoder" type="video/3gpp" />
-        <MediaCodec name="OMX.google.h264.decoder" type="video/avc" />
-        <MediaCodec name="OMX.google.vpx.decoder" type="video/x-vnd.on2.vp8" />
-    </Decoders>
-
-    <Encoders>
-        <MediaCodec name="OMX.google.amrnb.encoder" type="audio/3gpp" />
-        <MediaCodec name="OMX.google.amrwb.encoder" type="audio/amr-wb" />
-        <MediaCodec name="OMX.google.aac.encoder" type="audio/mp4a-latm" />
-        <MediaCodec name="OMX.google.flac.encoder" type="audio/flac" />
-    </Encoders>
-</MediaCodecs>
--- a/android/device/linaro/common/fake-ts/Android.mk
+++ /dev/null
@@ -1,30 +0,0 @@
-# Copyright (C) 2011 Linaro Limited
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-LOCAL_PATH:= $(call my-dir)
-
-ifneq ($(TARGET_SIMULATOR),true)
-
-include $(CLEAR_VARS)
-
-LOCAL_MODULE := faketsd
-
-LOCAL_MODULE_TAGS := optional
-
-LOCAL_SRC_FILES := fake-ts.c
-LOCAL_PRELINK_MODULE := false
-
-include $(BUILD_EXECUTABLE)
-
-endif # !TARGET_SIMULATOR
--- a/android/device/linaro/common/fake-ts/fake-ts.c
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright (C) 2011 Linaro Limited
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
- * express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-
-#include <stdio.h>
-#include <fcntl.h>
-#include <unistd.h>
-#include <string.h>
-
-#include <linux/uinput.h>
-
-/* look up source file system/core/init/devices.c for exact node */
-#define UINPUT_DEV "/dev/uinput"
-
-#define DEV_NAME "Fake Touchscreen"
-
-static int uinput_fd = 0;
-
-static void uinput_touch_init(const char* uinput_dev,
-                              const char* dev_name)
-{
-    struct uinput_user_dev dev;
-
-    uinput_fd = open(uinput_dev, O_WRONLY);
-    if (uinput_fd <= 0) {
-        perror("Error opening uinput device.\n");
-        return;
-    }
-    memset(&dev, 0, sizeof(dev));
-    strcpy(dev.name, dev_name);
-    write(uinput_fd, &dev, sizeof(dev));
-
-    /* touch screen event */
-    ioctl(uinput_fd, UI_SET_EVBIT, EV_ABS);
-    ioctl(uinput_fd, UI_SET_ABSBIT, ABS_X);
-    ioctl(uinput_fd, UI_SET_ABSBIT, ABS_Y);
-    ioctl(uinput_fd, UI_SET_EVBIT, EV_KEY);
-    ioctl(uinput_fd, UI_SET_KEYBIT, BTN_TOUCH);
-
-    /* register userspace input device */
-    ioctl(uinput_fd, UI_DEV_CREATE, 0);
-}
-
-static void uinput_touch_deinit()
-{
-    if (uinput_fd > 0) {
-        close(uinput_fd);
-    }
-}
-
-int main(int argc, char* argv[])
-{
-    uinput_touch_init(UINPUT_DEV, DEV_NAME);
-
-    while (1) {
-        sleep(60);
-    }
-
-    uinput_touch_deinit();
-
-    return 0;
-}
-
--- a/android/device/linaro/common/howto/default/HOWTO_getsourceandbuild.txt
+++ /dev/null
@@ -1,82 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/<BUILD_NAME>/":https://android-build.linaro.org/builds/~linaro-android/<BUILD_NAME>/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Save linaro_android_build_cmds.sh to where you'd like to make your build.
-
-h2. Run the build script
-
-The linaro_android_build_cmds.sh script will download the source and create the build.
-
-<pre>
-  $ chmod +x linaro_android_build_cmds.sh
-  $ ./linaro_android_build_cmds.sh
-</pre>
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev <BOARD> --boot out/target/product/<BOARD>/boot.tar.bz2 --system out/target/product/<BOARD>/system.tar.bz2 --userdata out/target/product/<BOARD>/userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev <BOARD> --boot out/target/product/<BOARD>/boot.tar.bz2 --system out/target/product/<BOARD>/system.tar.bz2 --userdata
-out/target/product/<BOARD>/userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
-
-
--- a/android/device/linaro/common/howto/default/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,69 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/<BUILD_NAME>/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/<TARGET>/boot.tar.bz2
-    target/product/<TARGET>/system.tar.bz2
-    target/product/<TARGET>/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev <BOARD> --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev <BOARD> --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  To find <BOARD> run linaro-android-media-create with a -h and read the help.
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/default/HOWTO_install.txt
+++ /dev/null
@@ -1,77 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/<BUILD_NAME>/":https://android-build.linaro.org/builds/~linaro-android/<BUILD_NAME>/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/<TARGET>/boot.tar.bz2
-* target/product/<TARGET>/system.tar.bz2
-* target/product/<TARGET>/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev <BOARD> --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev <BOARD> --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-To find <BOARD> run linaro-android-media-create with a -h and read the help.
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/panda-jb-gcc47-tilt-tracking-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,67 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcc47-tilt-tracking-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/panda/boot.tar.bz2
-    target/product/panda/system.tar.bz2
-    target/product/panda/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/panda-jb-gcc47-tilt-tracking-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,75 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcc47-tilt-tracking-blob/":https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcc47-tilt-tracking-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/panda/boot.tar.bz2
-* target/product/panda/system.tar.bz2
-* target/product/panda/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/nexus7-jb-gcc47-aosp-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,84 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~berolinux/nexus7-jb-gcc47-aosp-blob/
-
-= Get artifacts =
-
-  (You don't need the artifacts if you wish to build from source)
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/grouper/boot.img
-    target/product/grouper/system.img
-    target/product/grouper/userdata.img
-
-= Get and build source =
-
-  (You don't need the source if you wish to install from the binaries)
-
-  $ mkdir linaro-nexus7
-  $ cd linaro-nexus7
-  $ repo init -u git://android.git.linaro.org/ -b linaro-playground -m staging-nexus7.git
-  $ repo sync
-  $ make TARGET_PRODUCT=full_grouper TARGET_TOOLS_PREFIX=/path/to/your/linaro/android/toolchain/bin/arm-linux-androideabi- droidcore -j4
-
-= Get merge-nexus7-blobs script =
-
-  The script is available from:
-
-  http://android.git.linaro.org/gitweb?p=device/asus/grouper.git;a=blob_plain;f=merge-nexus7-blobs;hb=linaro-playground
-
-  or from git:
-
-  $ git clone git://android.git.linaro.org/device/asus/grouper.git
-  $ cd grouper
-  $ git checkout -b linaro-playground origin/linaro-playground
-
-  Make sure your computer is connected to the Internet, since
-  the script downloads non-free binaries and tools to extract images.
-
-  Run merge-nexus7-blobs script, giving the directory containing the .img files
-  as its sole argument.
-
-  The script will do the remaining bits for you, including flashing the tablet.
-
-  WARNING: There is no guarantee whatsoever that the build will work.
-           If it breaks your tablet, you get to keep both pieces.
-
-= Install Google Apps =
-
-If you wish to use the device as a real tablet rather than a pure development
-device, chances are that you want to install the Google Apps on it:
-
-  * Install the Linaro Android build as described above
-
-  * Grab the current Google Apps zip for JellyBean from http://goo.im/gapps
-    At the time of the writing, the current version is:
-    http://goo.im/gapps/gapps-jb-20120726-signed.zip
-
-  * If you downloaded from a device other than your Nexus 7, transfer
-    the file to your Nexus 7 using:
-
-    mtp-sendfile gapps-jb*.zip 8
-
-  * Turn your Nexus 7 off completely
-
-  * Hold down the Volume Up and Volume Down buttons at the same time, and turn
-    on the device
-
-  * Use the Volume Up button to select "Recovery mode", then press the power
-    button to launch it. Wait for recovery to come up.
-
-  * Select "install zip from sdcard"
-
-  * Select "choose zip from sdcard"
-
-  * Choose the gapps-jb zip file you downloaded earlier (it should be in the
-    Download/ folder)
-
-  * Select "Yes - Install gapps-jb-*-signed.zip"
-
-  * Select "+++++Go Back+++++"
-
-  * Select "reboot system now"
-
-  * Enjoy your Google Apps enabled Linaro Android build!
--- a/android/device/linaro/common/howto/nexus7-jb-gcc47-aosp-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,64 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~berolinux/nexus7-jb-gcc47-aosp-blob/":https://android-build.linaro.org/builds/~berolinux/nexus7-jb-gcc47-aosp-blob/
-
-h2. Get artifacts
-
-(You don't need the artifacts if you wish to build from source)
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/grouper/boot.img
-* target/product/grouper/system.img
-* target/product/grouper/userdata.img
-
-h2. Get and build source
-
-(You don't need the source if you wish to install from the binaries)
-
-<pre>
-  $ mkdir linaro-nexus7
-  $ cd linaro-nexus7
-  $ repo init -u git://android.git.linaro.org/ -b linaro-playground -m staging-nexus7.git
-  $ repo sync
-  $ make TARGET_PRODUCT=full_grouper TARGET_TOOLS_PREFIX=/path/to/your/linaro/android/toolchain/bin/arm-linux-androideabi- droidcore -j4
-</pre>
-
-h2. Get merge-nexus7-blobs script
-
-The script is available from:
-
-"http://android.git.linaro.org/gitweb?p=device/asus/grouper.git;a=blob_plain;f=merge-nexus7-blobs;hb=linaro-playground":http://android.git.linaro.org/gitweb?p=device/asus/grouper.git;a=blob_plain;f=merge-nexus7-blobs;hb=linaro-playground
-
-or from git:
-
-<pre>
-  $ git clone git://android.git.linaro.org/device/asus/grouper.git
-  $ cd grouper
-  $ git checkout -b linaro-playground origin/linaro-playground
-</pre>
-
-Make sure your computer is connected to the Internet, since the script downloads non-free binaries and tools to extract images.
-
-Run merge-nexus7-blobs script, giving the directory containing the .img files as its sole argument.
-
-The script will do the remaining bits for you, including flashing the tablet.
-
-*WARNING* There is no guarantee whatsoever that the build will work.
-If it breaks your tablet, you get to keep both pieces.
-
-h2. Install Google Apps
-
-If you wish to use the device as a real tablet rather than a pure development device, chances are that you want to install the Google Apps on it:
-* Install the Linaro Android build as described above
-* Grab the current Google Apps zip for JellyBean from "http://goo.im/gapps":http://goo.im/gapps . At the time of the writing, the current version is: "gapps-jb-20120726-signed.zip":http://goo.im/gapps/gapps-jb-20120726-signed.zip
-* If you downloaded from a device other than your Nexus 7, transfer the file to your Nexus 7 using: mtp-sendfile gapps-jb*.zip 8
-* Turn your Nexus 7 off completely
-* Hold down the Volume Up and Volume Down buttons at the same time, and turn on the device
-* Use the Volume Up button to select "Recovery mode", then press the power button to launch it. Wait for recovery to come up.
-* Select "install zip from sdcard"
-* Select "choose zip from sdcard"
-* Choose the gapps-jb zip file you downloaded earlier (it should be in the Download/ folder)
-* Select "Yes - Install gapps-jb-*-signed.zip"
-* Select "+++++Go Back+++++"
-* Select "reboot system now"
-* Enjoy your Google Apps enabled Linaro Android build!
--- a/android/device/linaro/common/howto/panda-jb-gcc47-tilt-stable-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,73 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcc47-tilt-stable-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/panda/boot.tar.bz2
-    target/product/panda/system.tar.bz2
-    target/product/panda/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Install graphics libraries
-
-  $ wget http://people.linaro.org/~vishalbhoj/install-binaries-4.0.4.sh
-  $ chmod a+x install-binaries-4.0.4.sh
-  $ ./install-binaries-4.0.4.sh
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/panda-jb-gcc47-tilt-stable-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,81 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcc47-tilt-stable-blob/":https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcc47-tilt-stable-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/panda/boot.tar.bz2
-* target/product/panda/system.tar.bz2
-* target/product/panda/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Install graphics libraries
-
-<pre>
-  $ wget http://people.linaro.org/~vishalbhoj/install-binaries-4.0.4.sh
-  $ chmod a+x install-binaries-4.0.4.sh
-  $ ./install-binaries-4.0.4.sh
-</pre>
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/snowball-jb-gcc47-igloo-stable-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,153 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android_snowball-jb-gcc47-igloo-stable-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/snowball/boot.tar.bz2
-    target/product/snowball/system.tar.bz2
-    target/product/snowball/userdata.tar.bz2
-
-  Accept the end-user license agreement
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
-
-= Notes =
-
- * Note 1 - Outdated U-Boot
-
-   During the 12.05 cycle, U-Boot changed and must be upgraded in eMMC if your
-   boot line is older than: U-boot 2012.04.01 (May 24 2012 - 19:50:12)
-
-   If you only want to be able to boot from the SD card and don't care about
-   booting from the eMMC (internal flash), the quick solution is to do:
-
-   $ sudo linaro-android-media-create --image-file snowball.img --image-size 1500M --dev snowball_emmc --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-   $ sudo riff -f snowball.img
-
-   If you don't have riff, follow the instructions below to install it.
-
-   If you want to be able to boot from the eMMC, you need to modify a few lines
-   in init.partitions.rc file.
-
-   $ mkdir temp
-   $ cd temp
-   $ mv ../boot.tar.bz2 .
-   $ tar xjf boot.tar.bz2
-   $ cd boot
-   $ mkdir temp
-   $ cd temp
-   $ mv ../uInitrd .
-   $ dd if=uInitrd of=initrd.gz bs=64 skip=1
-   $ gunzip initrd.gz
-   $ mkdir init
-   $ cd init
-   $ cpio -i < ../initrd
-
-   Open the init.partition.rc file and follow the instruction in the file
-
-   $ sudo find . | cpio -o -H newc | gzip > ../newinitrd.cpio.gz
-   $ mkimage -A arm -O linux -T ramdisk -C gzip -a 0 -e 0 -n initramfs -d ../newinitrd.cpio.gz ../uInitrd.new
-   $ cd ../..
-   $ cp temp/init/uInitrd.new uInitrd
-   $ rm -rf temp
-   $ cd ..
-   $ tar cjf boot.tar.bz2 boot
-   $ cd ..
-   $ mv temp/boot.tar.bz2 .
-   $ rm -rf temp
-
-   Download startupfiles from
-   http://www.igloocommunity.org/download/linaro/startupfiles/latest
-
-   $ tar -xvf startupfiles_3.0.8-0.tar.gz
-   $ linaro-android-media-create --image-file snowball.img --image-size 1500M --dev snowball_emmc --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-   $ sudo add-apt-repository ppa:igloocommunity-maintainers/snowball-tools
-   $ sudo apt-get update
-   $ sudo apt-get install riff
-
-   (OPTIONAL) Remove the PPA
-
-   $ sudo add-apt-repository --remove ppa:igloocommunity-maintainers/snowball-tools
-
-   Turn off the board
-
-   $ sudo riff -f snowball.img
-
-   Connect your board using the OTG USB port (next to power supply port) to
-   your PC
-   Turn on the board
-   Riff will detect the board and start the execution
-   When execution is finalized riff will exit
-
-   On the first boot, the user interface can take up to 10 minutes to come up.
-   Please be patient. If the board doesn't come up, you might be affected by
-   https://bugs.launchpad.net/bugs/823313 bug.
-
- * Note 2 - ADB only works over IP
-
-   In the console type:
-     stop adbd
-     setprop service.adb.tcp.port 6565
-     start adbd
-     ifconfig eth0 # to get boardsIP
-
-   On the host type:
-     adb connect boardsIP:6565
--- a/android/device/linaro/common/howto/snowball-jb-gcc47-igloo-stable-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,169 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android_snowball-jb-gcc47-igloo-stable-blob/":https://android-build.linaro.org/builds/~linaro-android_snowball-jb-gcc47-igloo-stable-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/snowball/boot.tar.bz2
-* target/product/snowball/system.tar.bz2
-* target/product/snowball/userdata.tar.bz2
-
-*Accept* the end-user license agreement
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
-
-h2. Notes
-
-* Note 1 - Outdated U-Boot
-
-During the 12.05 cycle, U-Boot changed and must be upgraded in eMMC if your
-boot line is older than: U-boot 2012.04.01 (May 24 2012 - 19:50:12)
-
-If you only want to be able to boot from the SD card and don't care about
-booting from the eMMC (internal flash), the quick solution is to do:
-
-<pre>
-   $ sudo linaro-android-media-create --image-file snowball.img --image-size 1500M --dev snowball_emmc --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-   $ sudo riff -f snowball.img
-</pre>
-
-If you don't have riff, follow the instructions below to install it.
-
-If you want to be able to boot from the eMMC, you need to modify a few lines
-in init.partitions.rc file.
-
-<pre>
-   $ mkdir temp
-   $ cd temp
-   $ mv ../boot.tar.bz2 .
-   $ tar xjf boot.tar.bz2
-   $ cd boot
-   $ mkdir temp
-   $ cd temp
-   $ mv ../uInitrd .
-   $ dd if=uInitrd of=initrd.gz bs=64 skip=1
-   $ gunzip initrd.gz
-   $ mkdir init
-   $ cd init
-   $ cpio -i < ../initrd
-</pre>
-
-Open the init.partition.rc file and follow the instruction in the file
-
-<pre>
-   $ sudo find . | cpio -o -H newc | gzip > ../newinitrd.cpio.gz
-   $ mkimage -A arm -O linux -T ramdisk -C gzip -a 0 -e 0 -n initramfs -d ../newinitrd.cpio.gz ../uInitrd.new
-   $ cd ../..
-   $ cp temp/init/uInitrd.new uInitrd
-   $ rm -rf temp
-   $ cd ..
-   $ tar cjf boot.tar.bz2 boot
-   $ cd ..
-   $ mv temp/boot.tar.bz2 .
-   $ rm -rf temp
-</pre>
-
-Download startupfiles from "http://www.igloocommunity.org/download/linaro/startupfiles/latest":http://www.igloocommunity.org/download/linaro/startupfiles/latest
-
-<pre>
-   $ tar -xvf startupfiles_3.0.8-0.tar.gz
-   $ linaro-android-media-create --image-file snowball.img --image-size 1500M --dev snowball_emmc --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-   $ sudo add-apt-repository ppa:igloocommunity-maintainers/snowball-tools
-   $ sudo apt-get update
-   $ sudo apt-get install riff
-</pre>
-
-(OPTIONAL) Remove the PPA
-
-pre. $ sudo add-apt-repository --remove ppa:igloocommunity-maintainers/snowball-tools
-
-Turn off the board
-
-pre. $ sudo riff -f snowball.img
-
-Connect your board using the OTG USB port (next to power supply port) to your PC
-Turn on the board
-Riff will detect the board and start the execution
-When execution is finalized riff will exit
-
-On the first boot, the user interface can take up to 10 minutes to come up.
-Please be patient. If the board doesn't come up, you might be affected by
-"bug 8823313":https://bugs.launchpad.net/bugs/823313
-
-* Note 2 - ADB only works over IP
-
-In the console type:
-<pre>
-     stop adbd
-     setprop service.adb.tcp.port 6565
-     start adbd
-     ifconfig eth0 # to get boardsIP
-</pre>
-
-On the host type:
-pre. adb connect boardsIP:6565
--- a/android/device/linaro/common/howto/panda-master-gcc44-aosp-stable-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,73 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/panda-master-gcc44-aosp-stable-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/panda/boot.tar.bz2
-    target/product/panda/system.tar.bz2
-    target/product/panda/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Install graphics libraries
-
-  $ wget http://people.linaro.org/~vishalbhoj/install-binaries-4.0.4.sh
-  $ chmod a+x install-binaries-4.0.4.sh
-  $ ./install-binaries-4.0.4.sh
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/panda-master-gcc44-aosp-stable-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,83 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/panda-master-gcc44-aosp-stable-blob/":https://android-build.linaro.org/builds/~linaro-android/panda-master-gcc44-aosp-stable-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/panda/boot.tar.bz2
-* target/product/panda/system.tar.bz2
-* target/product/panda/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Install graphics libraries
-
-<pre>
-  $ wget http://people.linaro.org/~vishalbhoj/install-binaries-4.0.4.sh
-  $ chmod a+x install-binaries-4.0.4.sh
-  $ ./install-binaries-4.0.4.sh
-</pre>
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/galaxynexus-jb-gcc47-aosp-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,68 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/galaxynexus-jb-gcc47-aosp-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/maguro/boot.img
-    target/product/maguro/system.img
-    target/product/maguro/userdata.img
-
-= Get merge-gnexus-blobs script =
-
-  The script is available from:
-
-  http://android.git.linaro.org/gitweb?p=device/samsung/tuna.git;a=blob_plain;f=merge-gnexus-blobs;hb=linaro_android_4.1.1
-
-  or from git:
-
-  $ git clone git://android.git.linaro.org/device/samsung/tuna.git
-  $ cd tuna
-  $ git checkout -b linaro_android_4.1.1 origin/linaro_android_4.1.1
-
-  Make sure your computer is connected to the Internet, since the script downloads non-free binaries and tools to extract images.
-
-  Run merge-gnexus-blobs script, giving the directory containing the .img files as its sole argument.
-
-  The script will do the remaining bits for you, including flashing the phone.
-
-  WARNING: There is no guarantee whatsoever that the build will work. If it breaks your phone, you get to keep both pieces.
-
-= Install Google Apps =
-
-  If you wish to use the phone as a real phone rather than a pure development device, chances are that you want to install the Google Apps on it:
-
-  * Install the Linaro Android build as described above
-
-  * Grab the current Google Apps zip for JellyBean from http://goo.im/gapps
-    At the time of the writing, the current version is:
-    http://goo.im/gapps/gapps-jb-20120726-signed.zip
-
-  * If you downloaded from a device other than your Galaxy Nexus, transfer
-    the file to your Galaxy Nexus using:
-
-    mtp-sendfile gapps-jb*.zip 8
-
-  * Turn your Galaxy Nexus off completely (remove the battery if in doubt)
-
-  * Hold down the Volume Up and Volume Down buttons at the same time, and turn
-    on the phone
-
-  * Use the Volume Up button to select "Recovery mode", then press the power
-    button to launch it. Wait for recovery to come up.
-
-  * Select "install zip from sdcard"
-
-  * Select "choose zip from sdcard"
-
-  * Choose the gapps-jb zip file you downloaded earlier (it should be in the
-    Download/ folder)
-
-  * Select "Yes - Install gapps-jb-*-signed.zip"
-
-  * Select "+++++Go Back+++++"
-
-  * Select "reboot system now"
-
-  * Enjoy your Google Apps enabled Linaro Android build!
--- a/android/device/linaro/common/howto/galaxynexus-jb-gcc47-aosp-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,50 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/galaxynexus-jb-gcc47-aosp-blob/":https://android-build.linaro.org/builds/~linaro-android/galaxynexus-jb-gcc47-aosp-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/maguro/boot.img
-* target/product/maguro/system.img
-* target/product/maguro/userdata.img
-
-h2. Get merge-gnexus-blobs script
-
-The script is available from:
-
-"http://android.git.linaro.org/gitweb?p=device/samsung/tuna.git;a=blob_plain;f=merge-gnexus-blobs;hb=linaro_android_4.1.1":http://android.git.linaro.org/gitweb?p=device/samsung/tuna.git;a=blob_plain;f=merge-gnexus-blobs;hb=linaro_android_4.1.1
-
-or from git:
-
-<pre>
-  $ git clone git://android.git.linaro.org/device/samsung/tuna.git
-  $ cd tuna
-  $ git checkout -b linaro_android_4.1.1 origin/linaro_android_4.1.1
-</pre>
-
-Make sure your computer is connected to the Internet, since the script downloads non-free binaries and tools to extract images.
-
-Run merge-gnexus-blobs script, giving the directory containing the .img files as its sole argument.
-
-The script will do the remaining bits for you, including flashing the phone.
-
-*WARNING* There is no guarantee whatsoever that the build will work. If it breaks your phone, you get to keep both pieces.
-
-h2. Install Google Apps
-
-If you wish to use the phone as a real phone rather than a pure development device, chances are that you want to install the Google Apps on it:
-
-* Install the Linaro Android build as described above
-* Grab the current Google Apps zip for JellyBean from "http://goo.im/gapps":http://goo.im/gapps . At the time of the writing, the current version is: "gapps-jb-20120726-signed.zip":http://goo.im/gapps/gapps-jb-20120726-signed.zip
-* If you downloaded from a device other than your Galaxy Nexus, transfer the file to your Galaxy Nexus using: mtp-sendfile gapps-jb*.zip 8
-* Turn your Galaxy Nexus off completely (remove the battery if in doubt)
-* Hold down the Volume Up and Volume Down buttons at the same time, and turn on the phone
-* Use the Volume Up button to select "Recovery mode", then press the power button to launch it. Wait for recovery to come up.
-* Select "install zip from sdcard"
-* Select "choose zip from sdcard"
-* Choose the gapps-jb zip file you downloaded earlier (it should be in the Download/ folder)
-* Select "Yes - Install gapps-jb-*-signed.zip"
-* Select "+++++Go Back+++++"
-* Select "reboot system now"
-* Enjoy your Google Apps enabled Linaro Android build!
--- a/android/device/linaro/common/howto/vexpress-jb-gcc47-armlt-tracking-open/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,72 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/vexpress-jb-gcc47-armlt-tracking-open/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/vexpress/boot.tar.bz2
-    target/product/vexpress/system.tar.bz2
-    target/product/vexpress/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev vexpress --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev vexpress --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -b 38400 -w -C minicom.txt OR minicom -D /dev/ttyS0 -w -C minicom.txt
-
-= Notes =
-
-  For new users, Versatile Express setup page is available at:
-    http://wiki.linaro.org/ARM/VersatileExpressSetup
--- a/android/device/linaro/common/howto/vexpress-jb-gcc47-armlt-tracking-open/HOWTO_install.txt
+++ /dev/null
@@ -1,81 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/vexpress-jb-gcc47-armlt-tracking-open/":https://android-build.linaro.org/builds/~linaro-android/vexpress-jb-gcc47-armlt-tracking-open/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/vexpress/boot.tar.bz2
-* target/product/vexpress/system.tar.bz2
-* target/product/vexpress/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev vexpress --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev vexpress --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -b 38400 -w -C minicom.txt OR minicom -D /dev/ttyS0 -w -C minicom.txt
-
-h2. Notes
-
-For new users, Versatile Express setup page is available at:
-
-"http://wiki.linaro.org/ARM/VersatileExpressSetup":http://wiki.linaro.org/ARM/VersatileExpressSetup
--- a/android/device/linaro/common/howto/origen-jb-gcc47-samsunglt-tracking-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,67 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/origen-jb-gcc47-samsunglt-tracking-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/origen/boot.tar.bz2
-    target/product/origen/system.tar.bz2
-    target/product/origen/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/origen-jb-gcc47-samsunglt-tracking-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,75 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/origen-jb-gcc47-samsunglt-tracking-blob/":https://android-build.linaro.org/builds/~linaro-android/origen-jb-gcc47-samsunglt-tracking-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/origen/boot.tar.bz2
-* target/product/origen/system.tar.bz2
-*  target/product/origen/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/vexpress-rtsm-jb-gcc47-armlt-stable-open/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,56 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/vexpress-rtsm-jb-gcc47-armlt-stable-open/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/vexpress_rtsm/boot.tar.bz2
-    target/product/vexpress_rtsm/system.tar.bz2
-    target/product/vexpress_rtsm/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media =
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --image-file mmc.bin --image-size 2000M --dev vexpress --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Untar boot tarball
-
-  $ tar -jxvf boot.tar.bz2
-
-  To Run on big.LITTLE
-
-  $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4-A7x4 -a coretile.cluster0.*=boot/img.axf -C motherboard.mmc.p_mmc_file=mmc.bin  -C coretile.cache_state_modelled=0
-
-  To Run on big.LITTLE with semi-hosting
-
-  $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4-A7x4 -a coretile.cluster0.*=./boot/img.axf -C motherboard.mmc.p_mmc_file=mmc.bin -C coretile.cache_state_modelled=0  -C coretile.cluster0.cpu0.semihosting-enable=1 -C coretile.cluster0.cpu0.semihosting-cmd_line='--kernel ./boot/zImagewithDT --initrd ./boot/Initrd -- console=ttyAMA mem=512M mem=512M@0x880000000 androidboot.console=ttyAMA0 earlyprintk init=/init'
-
-  To Run on A15 Simulator with semi-hosting
-
-  $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4 boot/linux-system-semi-A15.axf -C motherboard.mmc.p_mmc_file=./mmc.bin -C cluster.cpu0.semihosting-cmd_line="--kernel ./boot/uImagewithDT --initrd ./boot/Initrd --console=ttyAMA mem=512M mem=512M@0x880000000 earlyprintk init=/init"
-
-  To Run on A15 Simulator without semi-hosting
-
-  $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4 boot/linux-system-A15.axf -C motherboard.mmc.p_mmc_file=./mmc.bin
-
-= Check console output =
-
-  For FastModels, serial output is available over console
-
-  $ telnet 127.0.0.1 -debug 5000 -e ^z
--- a/android/device/linaro/common/howto/vexpress-rtsm-jb-gcc47-armlt-stable-open/HOWTO_install.txt
+++ /dev/null
@@ -1,60 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/vexpress-rtsm-jb-gcc47-armlt-stable-open/":https://android-build.linaro.org/builds/~linaro-android/vexpress-rtsm-jb-gcc47-armlt-stable-open/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/vexpress_rtsm/boot.tar.bz2
-* target/product/vexpress_rtsm/system.tar.bz2
-* target/product/vexpress_rtsm/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --image-file mmc.bin --image-size 2000M --dev vexpress --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Untar boot tarball
-
-pre. $ tar -jxvf boot.tar.bz2
-
-To Run on big.LITTLE
-
-pre. $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4-A7x4 -a coretile.cluster0.*=boot/img.axf -C motherboard.mmc.p_mmc_file=mmc.bin  -C coretile.cache_state_modelled=0
-
-To Run on big.LITTLE with semi-hosting
-
-pre. $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4-A7x4 -a coretile.cluster0.*=./boot/img.axf -C motherboard.mmc.p_mmc_file=mmc.bin -C coretile.cache_state_modelled=0  -C coretile.cluster0.cpu0.semihosting-enable=1 -C coretile.cluster0.cpu0.semihosting-cmd_line='--kernel ./boot/zImagewithDT --initrd ./boot/Initrd -- console=ttyAMA mem=512M mem=512M@0x880000000 androidboot.console=ttyAMA0 earlyprintk init=/init'
-
-To Run on A15 Simulator with semi-hosting
-
-pre. $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4 boot/linux-system-semi-A15.axf -C motherboard.mmc.p_mmc_file=./mmc.bin -C cluster.cpu0.semihosting-cmd_line="--kernel ./boot/uImagewithDT --initrd ./boot/Initrd --console=ttyAMA mem=512M mem=512M@0x880000000 earlyprintk init=/init"
-
-To Run on A15 Simulator without semi-hosting
-
-pre. $(PATH_TO_RTSM)/bin/RTSM_VE_Cortex-A15x4 boot/linux-system-A15.axf -C motherboard.mmc.p_mmc_file=./mmc.bin
-
-h2. Check console output
-
-For FastModels, serial output is available over console
-
-pre. $ telnet 127.0.0.1 -debug 5000 -e ^z
--- a/android/device/linaro/common/howto/panda-jb-gcctrunk-tilt-tracking-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,67 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcctrunk-tilt-tracking-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/panda/boot.tar.bz2
-    target/product/panda/system.tar.bz2
-    target/product/panda/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/panda-jb-gcctrunk-tilt-tracking-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,75 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcctrunk-tilt-tracking-blob/":https://android-build.linaro.org/builds/~linaro-android/panda-jb-gcctrunk-tilt-tracking-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/panda/boot.tar.bz2
-* target/product/panda/system.tar.bz2
-* target/product/panda/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev panda --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/origen-jb-gcc47-samsunglt-stable-blob/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,67 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android/origen-jb-gcc47-samsunglt-stable-blob/
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/origen/boot.tar.bz2
-    target/product/origen/system.tar.bz2
-    target/product/origen/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/origen-jb-gcc47-samsunglt-stable-blob/HOWTO_install.txt
+++ /dev/null
@@ -1,75 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android/origen-jb-gcc47-samsunglt-stable-blob/":https://android-build.linaro.org/builds/~linaro-android/origen-jb-gcc47-samsunglt-stable-blob/
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/origen/boot.tar.bz2
-* target/product/origen/system.tar.bz2
-* target/product/origen/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev origen --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
--- a/android/device/linaro/common/howto/snowball-jb-gcc47-linaro-tracking-open/HOWTO_prebuilt.txt
+++ /dev/null
@@ -1,133 +0,0 @@
-Instructions for https://android-build.linaro.org/builds/~linaro-android_snowball-jb-gcc47-linaro-tracking-open/
-
-This build is just a TINY Android. It will only boot to a prompt. (No GUI)
-
-= Get artifacts =
-
-  Scroll down to the 'Downloads' section
-
-  Click on each link to download:
-    target/product/snowball/boot.tar.bz2
-    target/product/snowball/system.tar.bz2
-    target/product/snowball/userdata.tar.bz2
-
-= Get linaro image tools =
-
-  This build requires at least version 12.09 of linaro-image-tools to work correctly.
-
-  Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools.
-
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-
-  If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-  If you're using a "tip" build do not skip the step and do the following:
-
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-
-= Create media (SD card) =
-
-  Disable automount (instructions provided for Gnome)
-
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-
-  Insert an SD card
-
-  Run 'dmesg'
-
-  $ dmesg
-
-  Look for a line that looks like the following at the end of the log
-
-  [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-  WARNING: In the next step, make sure you use /dev/"whatever you see above".
-           You can erase your hard drive with the wrong parameter.
-
-  Run linaro image tools
-
-  $ linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  If you're using tip of linaro image tools
-
-  $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-  Restore automount
-
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-
-  As long as we are waiting for https://bugs.launchpad.net/linaro-image-tools/+bug/1055644 to be solve we need to do a small work around and replace the
-  boot.scr file on the SD card.
-
-  Remove the SD card and insert it again.
-
-  Fetch mpoirier's boot.scr file
-
-  $ wget http://people.canonical.com/~mpoirier/android/linaro-tracking-open/boot.scr
-  $ cp boot.src /media/boot/.
-  $ umount /media/*
-
-  Remove the SD card from the device writer and plug it into the board.
-
-= Update U-Boot =
-
-  U-Boot must pass the device tree to the kernel to boot. This code was not enabled before the end of September 2012. If the U-Boot in your Snowballs EMMC is
-  older you must update it to be able to boot the snowball with this build.
-
-  The instructions below will take the same tarballs that was use for preparing the SD card and create an image that will be written to the EMMC of the Snowball.
-  It is not possible to boot from the EMMC in this case. We just write an image to get U-Boot updated.
-
-   Download startupfiles from
-   http://www.igloocommunity.org/download/linaro/startupfiles/latest
-
-   $ tar -xvf startupfiles_3.0.8-0.tar.gz
-   $ linaro-android-media-create --image-file snowball.img --image-size 1500M --dev snowball_emmc --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-   $ sudo add-apt-repository ppa:igloocommunity-maintainers/snowball-tools
-   $ sudo apt-get update
-   $ sudo apt-get install riff
-
-   (OPTIONAL) Remove the PPA
-
-   $ sudo add-apt-repository --remove ppa:igloocommunity-maintainers/snowball-tools
-
-   Turn off the board
-
-   $ sudo riff -f snowball.img
-
-   Connect your board using the OTG USB port (next to power supply port) to
-   your PC
-   Turn on the board
-   Riff will detect the board and start the execution
-   When execution is finalized riff will exit
-
-= Check console output =
-
-  Plug in an USB-to-serial converter and run minicom
-
-  $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
-
-= Notes =
-
- * Note 1 - ADB only works over IP
-
-   In the console type:
-     stop adbd
-     setprop service.adb.tcp.port 6565
-     start adbd
-     ifconfig eth0 # to get boardsIP
-
-   On the host type:
-     adb connect boardsIP:6565
-
- * Note 2 - Using a DVI monitor
-
-   If you are using a HDMI to DVI converter or cable then you should wait for about 10 seconds when booting
-   and when you see "av8100_hdmi av8100_hdmi.3: Framebuffer created (av8100_hdmi)" in the log press enter
-   and type "echo 2 > /sys/devices/av8100_hdmi.3/hdmisdtvswitch".
--- a/android/device/linaro/common/howto/snowball-jb-gcc47-linaro-tracking-open/HOWTO_install.txt
+++ /dev/null
@@ -1,140 +0,0 @@
-Instructions for "https://android-build.linaro.org/builds/~linaro-android_snowball-jb-gcc47-linaro-tracking-open/":https://android-build.linaro.org/builds/~linaro-android_snowball-jb-gcc47-linaro-tracking-open/
-
-This build is just a TINY Android. It will only boot to a prompt. (No GUI)
-
-h2. Get artifacts
-
-Scroll down to the 'Downloads' section
-
-Click on each link to download:
-* target/product/snowball/boot.tar.bz2
-* target/product/snowball/system.tar.bz2
-* target/product/snowball/userdata.tar.bz2
-
-h2. Get linaro image tools
-
-This build requires at least version 12.09 of linaro-image-tools to work correctly.
-
-Run these commands to get all the dependencies for linaro-image-tools and the tip of linaro-image-tools.
-
-<pre>
-  $ sudo add-apt-repository ppa:linaro-maintainers/tools
-  $ sudo apt-get update
-  $ sudo apt-get install linaro-image-tools
-</pre>
-
-If you're using a released build (with a -release or from releases.linaro.org), skip this step.
-If you're using a "tip" build do not skip the step and do the following:
-
-<pre>
-  $ sudo apt-get install bzr
-  $ bzr branch lp:linaro-image-tools
-</pre>
-
-h2. Create media (SD card)
-
-Disable automount (instructions provided for Gnome)
-
-<pre>
-  $ TMP1=$(dconf read /org/gnome/desktop/media-handling/automount)
-  $ TMP2=$(dconf read /org/gnome/desktop/media-handling/automount-open)
-  $ dconf write /org/gnome/desktop/media-handling/automount false
-  $ dconf write /org/gnome/desktop/media-handling/automount-open false
-</pre>
-
-Insert an SD card
-
-Run 'dmesg'
-
-pre. $ dmesg
-
-Look for a line that looks like the following at the end of the log
-
-pre. [288582.790722]  sdc: sdc1 sdc2 sdc3 sdc4 < sdc5 sdc6 >
-
-*WARNING* In the next step, make sure you use /dev/"whatever you see above".
-You can erase your hard drive with the wrong parameter.
-
-Run linaro image tools
-
-pre. $ linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-If you're using tip of linaro image tools
-
-pre. $ ./linaro-image-tools/linaro-android-media-create --mmc /dev/sdc --dev snowball_sd --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-Restore automount
-
-<pre>
-  $ dconf write /org/gnome/desktop/media-handling/automount $TMP1
-  $ dconf write /org/gnome/desktop/media-handling/automount-open $TMP2
-</pre>
-
-As long as we are waiting for https://bugs.launchpad.net/linaro-image-tools/+bug/1055644 to be solve we need to do a small work around and replace the boot.scr file on the SD card.
-
-Remove the SD card and insert it again.
-
-Fetch mpoirier's boot.scr file
-
-<pre>
-  $ wget http://people.canonical.com/~mpoirier/android/linaro-tracking-open/boot.scr
-  $ cp boot.src /media/boot/.
-  $ umount /media/*
-</pre>
-
-Remove the SD card from the device writer and plug it into the board.
-
-h2. Update U-Boot
-
-U-Boot must pass the device tree to the kernel to boot. This code was not enabled before the end of September 2012. If the U-Boot in your Snowballs EMMC is older you must update it to be able to boot the snowball with this build.
-
-The instructions below will take the same tarballs that was use for preparing the SD card and create an image that will be written to the EMMC of the Snowball. It is not possible to boot from the EMMC in this case. We just write an image to get U-Boot updated.
-
-Download startupfiles from "http://www.igloocommunity.org/download/linaro/startupfiles/latest":http://www.igloocommunity.org/download/linaro/startupfiles/latest
-
-<pre>
-   $ tar -xvf startupfiles_3.0.8-0.tar.gz
-   $ linaro-android-media-create --image-file snowball.img --image-size 1500M --dev snowball_emmc --boot boot.tar.bz2 --system system.tar.bz2 --userdata userdata.tar.bz2
-
-   $ sudo add-apt-repository ppa:igloocommunity-maintainers/snowball-tools
-   $ sudo apt-get update
-   $ sudo apt-get install riff
-<pre>
-
-(OPTIONAL) Remove the PPA
-
-pre. $ sudo add-apt-repository --remove ppa:igloocommunity-maintainers/snowball-tools
-
-Turn off the board
-
-pre. $ sudo riff -f snowball.img
-
-Connect your board using the OTG USB port (next to power supply port) to your PC
-Turn on the board
-Riff will detect the board and start the execution
-When execution is finalized riff will exit
-
-h2. Check console output
-
-Plug in an USB-to-serial converter and run minicom
-
-pre. $ minicom -D /dev/ttyUSB0 -w -C minicom.txt
-
-h2. Notes
-
-* Note 1 - ADB only works over IP
-
-In the console type:
-<pre>
-     stop adbd
-     setprop service.adb.tcp.port 6565
-     start adbd
-     ifconfig eth0 # to get boardsIP
-</pre>
-
-On the host type:
-pre. adb connect boardsIP:6565
-
-* Note 2 - Using a DVI monitor
-
-If you are using a HDMI to DVI converter or cable then you should wait for about 10 seconds when booting and when you see "av8100_hdmi av8100_hdmi.3: Framebuffer created (av8100_hdmi)" in the log press enter and type "echo 2 > /sys/devices/av8100_hdmi.3/hdmisdtvswitch".
--- a/android/device/linaro/common/tasks/bootloader.mk
+++ /dev/null
@@ -1,236 +0,0 @@
-# Rules for building bootloaders
-
-BOOTLOADER_OUT = $(realpath $(PRODUCT_OUT))/boot
-BOOTLOADER_TARGETS :=
-
-# Bootloaders have their own separate makefiles and we don't track the
-# dependencies these, therefore we need to remake them every time in case
-# files need updating. To facilitate this, bootloader rules will depend on
-# this phony target...
-.PHONY : FORCE_BOOTLOADER_REMAKE
-
-#
-# Generate a rule to build U-Boot.
-#
-# Usage: $(eval $(call MAKE_UBOOT, target-binary, config-name))
-#
-#   target-binary   Path and name for generated u-boot.bin
-#   config-name     Without trailing '_config'
-#
-#
-define MAKE_UBOOT
-
-$(1): $$(ACP) FORCE_BOOTLOADER_REMAKE
-	$$(eval _obj := $$(PRODUCT_OUT)/obj/u-boot.$(2))
-	@mkdir -p $$(_obj)
-	cd $$(TOP)/u-boot && \
-	if [ -e $$(UBOOT_TCDIR)/$$(UBOOT_TCPREFIX)ld.bfd ]; then ln -sf $$(UBOOT_TCDIR)/$$(UBOOT_TCPREFIX)ld.bfd $$(UBOOT_TCPREFIX)ld; fi && \
-	export PATH=`pwd`:$$(UBOOT_TCDIR):$$(PATH) && \
-	$$(MAKE) O=../$$(_obj) CROSS_COMPILE=$$(UBOOT_TCPREFIX) $(2)_config && \
-	$$(MAKE) O=../$$(_obj) CROSS_COMPILE=$$(UBOOT_TCPREFIX)
-	@mkdir -p $$(dir $$@)
-	$$(ACP) -fpt $$(_obj)/u-boot.bin $$@
-
-endef
-
-#
-# UBOOT_FLAVOURS contains a list of extra U-Boot binaries to build, each
-# entry in the list is in the form <config-name>:<binary-name>
-#
-UBOOT_FLAVOUR_TARGETS :=
-$(foreach _ub,$(UBOOT_FLAVOURS),                      \
-    $(eval _config := $(call word-colon,1,$(_ub)))    \
-    $(eval _binary := $(call word-colon,2,$(_ub)))    \
-    $(eval _target := $(BOOTLOADER_OUT)/$(_binary))   \
-    $(eval $(call MAKE_UBOOT,$(_target),$(_config)))  \
-    $(eval UBOOT_FLAVOUR_TARGETS += $(_target))       \
-    )
-
-BOOTLOADER_TARGETS += $(UBOOT_FLAVOUR_TARGETS)
-
-
-#
-# UEFI
-#
-
-ifneq ($(UEFI_TOOLS_PREFIX),)
-# Used supplied prefix
-else
-ifneq ($(findstring prebuilt,$(TARGET_TOOLS_PREFIX)),)
-# The AOSP prebuilt toolchain is too old to compile UEFI, so we fall
-# back to a system compiler
-UEFI_TOOLS_PREFIX := arm-linux-gnueabi-
-else
-# UEFI is not an Android application and should be built with the bare
-# metal toolchain if it is available...
-UEFI_TOOLS_DIR = $(realpath $(dir $(TARGET_TOOLS_PREFIX)))/
-UEFI_TOOLS_PREFIX = $(UEFI_TOOLS_DIR)$(shell if [ -e $(UEFI_TOOLS_DIR)arm-eabi-gcc ]; then echo arm-eabi-; else echo $(notdir $(TARGET_TOOLS_PREFIX)); fi)
-# Use GNU linker if exists, as gold doesn't work...
-UEFI_TOOLS_LD := $(shell if [ -e $(UEFI_TOOLS_PREFIX)ld.bfd ]; then echo ld.bfd; else echo ld; fi)
-endif
-endif
-UEFI_TOOLS_LD ?= ld
-
-
-EDK2_OUT_DIR = $(realpath $(PRODUCT_OUT))/obj/uefi
-EDK2_WORKSPACE = $(realpath $(TOP)/uefi/edk2)
-EDK2_BASETOOLS := $(EDK2_WORKSPACE)/BaseTools
-EDK2_DEB_REL ?= RELEASE
-UEFI_ROM_TARGETS :=
-UEFI_ROM_INSTALL_TARGET :=
-
-
-#
-# EDK2 setup and tools
-#
-
-.PHONY : edk2_setup
-edk2_setup :
-	rm -f $(EDK2_WORKSPACE)/Conf/tools_def.txt
-	cd $(EDK2_WORKSPACE) && \
-	export WORKSPACE=$(EDK2_WORKSPACE) && \
-	export EDK_TOOLS_PATH=$(EDK2_BASETOOLS) && \
-	bash -c "$(EDK2_WORKSPACE)/edksetup.sh $(EDK2_WORKSPACE)"
-	sed -e "s/\(.*\)ENV(ARMLINUXGCC_TOOLS_PATH)arm-linux-gnueabi-ld\(.*\)/\1ENV(ARMLINUXGCC_TOOLS_PATH)arm-linux-gnueabi-$(UEFI_TOOLS_LD)\2/" -i $(EDK2_WORKSPACE)/Conf/tools_def.txt
-	sed -e "s/\(.*\)ENV(ARMLINUXGCC_TOOLS_PATH)arm-linux-gnueabi-\(.*\)/\1ENV(ARMLINUXGCC_TOOLS_PREFIX)\2/" -i $(EDK2_WORKSPACE)/Conf/tools_def.txt
-
-.PHONY : edk2_setup_clean
-edk2_setup_clean :
-	cd $(EDK2_WORKSPACE)/Conf && \
-	rm -f BuildEnv.sh build_rule.txt FrameworkDatabase.txt target.txt tools_def.txt
-
-
-.PHONY : edk2_tools
-edk2_tools : edk2_setup
-	$(MAKE) -j1 -C $(EDK2_BASETOOLS)
-
-.PHONY : edk2_tools_clean
-edk2_tools_clean :
-	$(MAKE) -j1 -C $(EDK2_BASETOOLS) clean
-
-
-# Note, the use of "export MAKEFLAGS=" in this rule is done to clear any
-# '-j' option which would be inherited by the make processes spawned by
-# the 'build' command. Without this, we get an error like:
-# "make[1]: *** read jobs pipe: Is a directory. Stop."
-#
-# We also make the rule for ROMs depend on each other in a chain (using
-# EDK2_PREVIOUS_ROM), this forces them to be built one at a time and
-# prevents the build error: "IntegrityError: PRIMARY KEY must be unique"
-
-define edk2_build
-
-$(1) : $(2) edk2_tools FORCE_BOOTLOADER_REMAKE | $(EDK2_PREVIOUS_ROM)
-	cd $$(EDK2_WORKSPACE) && \
-	export WORKSPACE=$$(EDK2_WORKSPACE) && \
-	export EDK_TOOLS_PATH=$$(EDK2_BASETOOLS) && \
-	export PATH=$$(EDK2_BASETOOLS)/BinWrappers/PosixLike:$$(PATH) && \
-	export ARMLINUXGCC_TOOLS_PREFIX=$$(UEFI_TOOLS_PREFIX) && \
-	export MAKEFLAGS= && \
-	build -N -a ARM -t ARMLINUXGCC -b $(EDK2_DEB_REL) -D EDK2_OUT_DIR=$(EDK2_OUT_DIR)/$(3) $(4)
-
-UEFI_ROM_TARGETS += $(1)
-EDK2_PREVIOUS_ROM = $(1)
-
-endef
-
-EDK2_PREVIOUS_ROM =
-
-
-.PHONY : edk2_build_clean
-edk2_build_clean :
-	rm -rf $(EDK2_WORKSPACE)/Conf/.cache
-	rm -rf $(EDK2_OUT_DIR)
-
-
-define edk2_install
-
-$(1) : $(2) $$(ACP)
-	@mkdir -p $$(dir $$@)
-	$$(ACP) -fpt $$< $$@
-
-UEFI_ROM_INSTALL_TARGET += $(1)
-
-endef
-
-
-.PHONY : edk2_clean
-edk2_clean : edk2_setup_clean edk2_tools_clean edk2_build_clean
-
-
-define edk2_rom_name
-$(EDK2_OUT_DIR)/$(1)/$(EDK2_DEB_REL)_ARMLINUXGCC/FV/$(2).fd
-endef
-
-
-#
-# Generate a rule to build an EDK2 UEFI ROM
-#
-# Usage: $(eval $(call MAKE_EDK2_ROM, platform-file, build-dir, rom-image, installed-name, dependencies))
-#
-# platform-file   Platform file (.dsc file). Can be abused to add trailing build commands.
-# build-dir       Directory, under $(EDK2_OUT_DIR), for build products.
-# rom-image       Rom image name (from .fdf file) converted to upper-case.
-# installed-name  Name to copy ROM to in boot directory.
-# dependencies    List of targets the rule depends on.
-#
-define MAKE_EDK2_ROM
-$(eval $(call edk2_build,$(call edk2_rom_name,$(2),$(3)),$(5),$(2),-p $(1) -r $(3)))
-$(eval $(call edk2_install,$(BOOTLOADER_OUT)/$(4),$(call edk2_rom_name,$(2),$(3))))
-endef
-
-
-#
-# Helpers for building RTSM boot-wrappers
-#
-
-ifneq ($(BOOTWRAPPER_TOOLS_PREFIX),)
-# Used supplied prefix
-BOOTWRAPPER_TCDIR = $(realpath $(shell dirname $(BOOTWRAPPER_TOOLS_PREFIX)))
-BOOTWRAPPER_TCPREFIX = $(shell basename $(BOOTWRAPPER_TOOLS_PREFIX))
-else
-ifneq ($(findstring prebuilt,$(TARGET_TOOLS_PREFIX)),)
-# The AOSP prebuilt toolchain is too old to compile
-# the boot-wrapper, so we fall back to a system compiler
-BOOTWRAPPER_TCDIR = $(shell basename `which arm-linux-gnueabi-gcc`)
-BOOTWRAPPER_TCPREFIX = arm-linux-gnueabi-
-else
-BOOTWRAPPER_TCDIR = $(realpath $(shell dirname $(TARGET_TOOLS_PREFIX)))
-# The boot-wrapper is not an Android application and should be
-# built with the bare metal toolchain if it is available
-BOOTWRAPPER_TCPREFIX = $(shell if [ -e $(BOOTWRAPPER_TCDIR)/arm-eabi-gcc ]; then echo arm-eabi-; else basename $(TARGET_TOOLS_PREFIX); fi)
-endif
-endif
-
-#
-# Invoke make with the toolchain setup for cross compilation, example usage:
-#
-#   cd $$(TOP)/boot-wrapper && $(MAKE_RTSM_BOOTWRAPPER) linux-system-semi.axf
-#
-# As Linaro's toolchain uses the gold linker and this doesn't work
-# correctly for the bootwrapper, this macro checks for the presence of
-# BFD LD and forces this into the PATH ahead of everything else, (this is
-# based on code in uboot.mk).
-#
-define MAKE_RTSM_BOOTWRAPPER
-	if [ -e $(BOOTWRAPPER_TCDIR)/$(BOOTWRAPPER_TCPREFIX)ld.bfd ]; then ln -sf $(BOOTWRAPPER_TCDIR)/$(BOOTWRAPPER_TCPREFIX)ld.bfd $(BOOTWRAPPER_TCPREFIX)ld; fi && \
-	export PATH=`pwd`:$(BOOTWRAPPER_TCDIR):$(PATH) && \
-	$(MAKE) CROSS_COMPILE=$(BOOTWRAPPER_TCPREFIX)
-endef
-
-
-#
-# Include custom makefiles
-#
-ifneq ($(CUSTOM_BOOTLOADER_MAKEFILE),)
-include $(TOP)/$(CUSTOM_BOOTLOADER_MAKEFILE)
-endif
-
-
-BOOTLOADER_TARGETS += $(UEFI_ROM_INSTALL_TARGET)
-
-.PHONY : uefi_roms
-uefi_roms : $(UEFI_ROM_TARGETS)
-
-
-$(INSTALLED_BOOTTARBALL_TARGET): $(BOOTLOADER_TARGETS)
--- a/android/device/linaro/common/tasks/bootfiles.mk
+++ b/android/device/linaro/common/tasks/bootfiles.mk
@@ -1,62 +1,18 @@
-.PHONY: u-boot-img mlo
-ifneq (,$(filter $(TARGET_PRODUCT), pandaboard panda5 full_panda))
-u-boot-img: $(PRODUCT_OUT)/u-boot.img
-mlo: $(PRODUCT_OUT)/MLO
-else
-u-boot-img:
-mlo:
-endif
 
-.PHONY: u-boot
 ifeq ($(TARGET_USE_UBOOT),true)
-u-boot: $(PRODUCT_OUT)/u-boot.bin
-else
-u-boot: 
-endif
-
-.PHONY: xloader-config
-.PHONY:	x-loader
-.PHONY: cleanup
-ifeq ($(TARGET_USE_XLOADER),true)
-cleanup:
-	cd $(TOP)/device/linaro/x-loader &&\
-	make mrproper
-
-xloader-config: cleanup
-	cd $(TOP)/device/linaro/x-loader &&\
-	make $(XLOADER_CONFIG)
-
-x-loader: xloader-config
-	cd $(TOP)/device/linaro/x-loader &&\
-	make ARCH=arm CROSS_COMPILE=$(shell sh -c "cd $(TOP); cd `dirname $(TARGET_TOOLS_PREFIX)`; pwd")/$(shell basename $(TARGET_TOOLS_PREFIX)) all
-else
-xloader-config:
-x-loader:
+bootfiles: $(PRODUCT_OUT)/u-boot.bin 
 endif
 
-.PHONY:	copybootfiles
-copybootfiles:	x-loader u-boot u-boot-img mlo
+bootfiles:
 	$(hide) mkdir -p $(PRODUCT_OUT)/boot
-ifneq (,$(filter $(TARGET_PRODUCT), pandaboard panda5))
-	cp $(PRODUCT_OUT)/u-boot.img $(PRODUCT_OUT)/boot
-	cp $(PRODUCT_OUT)/MLO $(PRODUCT_OUT)/boot
-endif
-ifeq ($(TARGET_PRODUCT), full_panda)
-	cp $(PRODUCT_OUT)/u-boot.img $(PRODUCT_OUT)/boot
-	cp $(PRODUCT_OUT)/MLO $(PRODUCT_OUT)/boot
-endif
 ifeq ($(TARGET_USE_UBOOT),true)
 	cp $(PRODUCT_OUT)/u-boot.bin $(PRODUCT_OUT)/boot
 ifeq ($(TARGET_PRODUCT), iMX53)
 	cp -L $(PRODUCT_OUT)/u-boot.imx $(PRODUCT_OUT)/boot
 endif
-ifeq ($(TARGET_PRODUCT), iMX6)
-	cp -L $(PRODUCT_OUT)/u-boot.imx $(PRODUCT_OUT)/boot
-endif
 endif
 ifeq ($(TARGET_USE_XLOADER),true)
-	cp $(TOP)/device/linaro/x-loader/MLO $(PRODUCT_OUT)/boot
+	cp $(XLOADER_BINARY) $(PRODUCT_OUT)/boot
 endif
 
-$(INSTALLED_BOOTTARBALL_TARGET): copybootfiles
-
+$(INSTALLED_BOOTTARBALL_TARGET): bootfiles
--- a/android/device/linaro/common/tasks/uboot.mk
+++ b/android/device/linaro/common/tasks/uboot.mk
@@ -1,108 +1,15 @@
-ifeq ($(TARGET_USE_UBOOT), true)
-ifneq ($(UBOOT_TOOLS_PREFIX),)
-UBOOT_TCDIR = $(realpath $(shell dirname $(UBOOT_TOOLS_PREFIX)))
-UBOOT_TCPREFIX = $(shell basename $(UBOOT_TOOLS_PREFIX))
-else
-ifneq ($(findstring prebuilt,$(TARGET_TOOLS_PREFIX)),)
-# The AOSP prebuilt toolchain is too old to compile
-# current u-boot, so we fall back to a system compiler
-UBOOT_TCDIR = $(shell basename `which arm-linux-gnueabi-gcc`)
-UBOOT_TCPREFIX = arm-linux-gnueabi-
-else
-UBOOT_TCDIR = $(realpath $(shell dirname $(TARGET_TOOLS_PREFIX)))
-# u-boot is not an Android application and should be
-# built with the bare metal toolchain if it is available
-UBOOT_TCPREFIX = $(shell if [ -e $(UBOOT_TCDIR)/arm-eabi-gcc ]; then echo arm-eabi-; else basename $(TARGET_TOOLS_PREFIX); fi)
-endif
-endif
-
-
-ifeq ($(USE_PREBUILT_UBOOT),)
-USE_PREBUILT_UBOOT=false
-endif
-
-ifeq ($(USE_PREBUILT_UBOOT), false)
-# u-boot can't be built with gold - so we force BFD LD into the
-# PATH ahead of everything else
-android_uboot: $(ACP)
+android_uboot:
 	mkdir -p $(PRODUCT_OUT)/obj/u-boot
 	cd $(TOP)/u-boot &&\
-	if [ -e $(UBOOT_TCDIR)/$(UBOOT_TCPREFIX)ld.bfd ]; then ln -sf $(UBOOT_TCDIR)/$(UBOOT_TCPREFIX)ld.bfd $(UBOOT_TCPREFIX)ld; fi &&\
-	export PATH=`pwd`:$(UBOOT_TCDIR):$(PATH) && \
-	$(MAKE) O=../$(PRODUCT_OUT)/obj/u-boot CROSS_COMPILE=$(UBOOT_TCPREFIX) $(UBOOT_CONFIG) &&\
-	$(MAKE) O=../$(PRODUCT_OUT)/obj/u-boot CROSS_COMPILE=$(UBOOT_TCPREFIX)
+	make O=../$(PRODUCT_OUT)/obj/u-boot CROSS_COMPILE=arm-linux-gnueabi- $(UBOOT_CONFIG) &&\
+	make O=../$(PRODUCT_OUT)/obj/u-boot CROSS_COMPILE=arm-linux-gnueabi- 
 ifeq ($(TARGET_PRODUCT), iMX53)
-	cd $(TOP)/u-boot &&\
-	export PATH=`pwd`:$(UBOOT_TCDIR):$(PATH) && \
-	$(MAKE) CROSS_COMPILE=$(UBOOT_TCPREFIX) $(UBOOT_CONFIG) && \
-	$(MAKE) CROSS_COMPILE=$(UBOOT_TCPREFIX) u-boot.imx
+	make CROSS_COMPILE=arm-linux-gnueabi- $(UBOOT_CONFIG) && make CROSS_COMPILE=arm-linux-gnueabi- u-boot.imx
 endif
-ifeq ($(TARGET_PRODUCT), iMX6)
-	cd $(TOP)/u-boot &&\
-	export PATH=`pwd`:$(UBOOT_TCDIR):$(PATH) && \
-	$(MAKE) CROSS_COMPILE=$(UBOOT_TCPREFIX) $(UBOOT_CONFIG) && \
-	$(MAKE) CROSS_COMPILE=$(UBOOT_TCPREFIX) u-boot.imx
-endif
-	cd $(TOP) && $(ACP) -fept $(PRODUCT_OUT)/obj/u-boot/tools/mkimage $(BUILD_OUT_EXECUTABLES)/
 
 $(PRODUCT_OUT)/u-boot.bin: android_uboot
 	ln -sf obj/u-boot/u-boot.bin $(PRODUCT_OUT)/u-boot.bin
 ifeq ($(TARGET_PRODUCT), iMX53)
-	cp $(TOP)/u-boot/u-boot.imx $(PRODUCT_OUT)/u-boot.imx
-endif
-ifeq ($(TARGET_PRODUCT), iMX6)
-	cp $(TOP)/u-boot/u-boot.imx $(PRODUCT_OUT)/u-boot.imx
-endif
-ifeq ($(TARGET_PRODUCT), origen)
-	mkdir -p $(PRODUCT_OUT)/boot
-	cp $(PRODUCT_OUT)/obj/u-boot/spl/origen-spl.bin $(PRODUCT_OUT)/boot/u-boot-mmc-spl.bin
-endif
+	cp u-boot.imx $(PRODUCT_OUT)/u-boot.imx
 endif
 
-ifeq ($(TARGET_PRODUCT), origen_quad)
-ifeq ($(USE_PREBUILT_UBOOT), true)
-$(PRODUCT_OUT)/u-boot.bin:
-	mkdir -p $(PRODUCT_OUT)/boot
-	cp $(TOP)/device/linaro/origen_quad/bl1 $(PRODUCT_OUT)/boot/u-boot-mmc-spl.bin
-	cp $(TOP)/device/linaro/origen_quad/u-boot.bin $(PRODUCT_OUT)/u-boot.bin
-endif
-endif
-
-ifneq (,$(filter $(TARGET_PRODUCT),pandaboard panda5))
-ifeq ($(USE_PREBUILT_UBOOT), true)
-$(PRODUCT_OUT)/u-boot.bin:
-	ln -sf ../../../../device/linaro/pandaboard/u-boot.bin $(PRODUCT_OUT)/u-boot.bin
-$(PRODUCT_OUT)/u-boot.img:
-	ln -sf ../../../../device/linaro/pandaboard/u-boot.bin $(PRODUCT_OUT)/u-boot.img
-
-$(PRODUCT_OUT)/MLO:
-	ln -sf ../../../../device/linaro/pandaboard/MLO $(PRODUCT_OUT)/MLO
-else
-$(PRODUCT_OUT)/u-boot.img: android_uboot
-	ln -sf obj/u-boot/u-boot.img $(PRODUCT_OUT)/u-boot.img
-
-$(PRODUCT_OUT)/MLO: android_uboot
-	ln -sf obj/u-boot/MLO $(PRODUCT_OUT)/MLO
-endif
-endif
-
-ifeq ($(TARGET_PRODUCT), full_panda)
-ifeq ($(USE_PREBUILT_UBOOT), true)
-$(PRODUCT_OUT)/u-boot.bin:
-	ln -sf ../../../../device/ti/panda/u-boot.bin $(PRODUCT_OUT)/u-boot.bin
-$(PRODUCT_OUT)/u-boot.img:
-	ln -sf ../../../../device/ti/panda/u-boot.bin $(PRODUCT_OUT)/u-boot.img
-
-$(PRODUCT_OUT)/MLO:
-	ln -sf ../../../../device/ti/panda/MLO $(PRODUCT_OUT)/MLO
-else
-$(PRODUCT_OUT)/u-boot.img: android_uboot
-	ln -sf obj/u-boot/u-boot.img $(PRODUCT_OUT)/u-boot.img
-
-$(PRODUCT_OUT)/MLO: android_uboot
-	ln -sf obj/u-boot/MLO $(PRODUCT_OUT)/MLO
-endif
-endif
-else
-$(PRODUCT_OUT)/u-boot.bin:
-endif
--- a/android/device/linaro/common/tasks/kernel.mk
+++ b/android/device/linaro/common/tasks/kernel.mk
@@ -1,183 +1,7 @@
-ifneq ($(strip $(SHOW_COMMANDS)),)
-KERNEL_VERBOSE="V=1"
-endif
-
-KERNEL_TOOLS_PREFIX ?= $(shell sh -c "cd $(TOP); cd `dirname $(TARGET_TOOLS_PREFIX)`; pwd")/$(shell basename $(TARGET_TOOLS_PREFIX))
-
-REALTOP=$(realpath $(TOP))
-
-KERNEL_OUT=$(realpath $(PRODUCT_OUT))/obj/kernel
-
-ifneq ($(strip $(BUILD_TINY_ANDROID)),true)
-# We can build perf if it's included in the kernel and has the
-# Android compatibility patch in
-ifneq ($(wildcard $(TOP)/kernel/tools/perf/compat-android.h),)
-	INCLUDE_PERF := 1
-	PERF_DEP := $(PRODUCT_OUT)/obj/STATIC_LIBRARIES/libelf_intermediates/libelf.a
-endif
-endif
-
-ifeq ($(strip $(ANDROID_64)),true)
-KERNEL_TARGET := Image
-else
-ifeq ($(strip $(TARGET_BOOTLOADER_TYPE)),fastboot)
-BOOTLOADER_DEP :=
-KERNEL_TARGET := zImage
-else
-BOOTLOADER_DEP := $(PRODUCT_OUT)/u-boot.bin
-KERNEL_TARGET := uImage
-endif
-endif
-
-ifeq ($(strip $(ANDROID_64)),true)
-ARCH := arm64
-LOCAL_CFLAGS=
-KERNEL_COMPILER_PATHS := $(REALTOP)/gcc-linaro-aarch64-linux-gnu-4.7/bin:../$(BUILD_OUT_EXECUTABLES)
-else
-ARCH := arm
-LOCAL_CFLAGS=$(call cc-option,"-mno-unaligned-access", )
-KERNEL_COMPILER_PATHS := ../$(BUILD_OUT_EXECUTABLES)
-endif
-
-android_kernel: $(BOOTLOADER_DEP) $(PERF_DEP)
-	echo building kernel $(KERNEL_TARGET) with config $(KERNEL_CONFIG) for bootloader $(TARGET_BOOTLOADER_TYPE)
-	mkdir -p $(KERNEL_OUT)
-	cd $(TOP)/kernel &&\
-	export PATH=$(KERNEL_COMPILER_PATHS):$(PATH) && \
-	if [ -e $(KERNEL_TOOLS_PREFIX)ld.bfd ]; then LD=$(KERNEL_TOOLS_PREFIX)ld.bfd; else LD=$(KERNEL_TOOLS_PREFIX)ld; fi && \
-	if [ $(words $(KERNEL_CONFIG)) -gt 1 ]; \
-	then scripts/kconfig/merge_config.sh -m $(KERNEL_CONFIG) && mv -f .config $(KERNEL_OUT)/.merged.config && $(MAKE) -j1 $(KERNEL_VERBOSE) O=$(KERNEL_OUT) ARCH=$(ARCH) KCONFIG_ALLCONFIG=$(KERNEL_OUT)/.merged.config alldefconfig; \
-	else $(MAKE) -j1 KCFLAGS="$(TARGET_EXTRA_CFLAGS) -fno-pic $(LOCAL_CFLAGS)" $(KERNEL_VERBOSE) O=$(KERNEL_OUT) ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_TOOLS_PREFIX) LD=$$LD defconfig $(KERNEL_CONFIG); \
-	fi && \
-	$(MAKE) $(KERNEL_VERBOSE) O=$(KERNEL_OUT) ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_TOOLS_PREFIX) KCFLAGS="$(TARGET_EXTRA_CFLAGS) -fno-pic $(LOCAL_CFLAGS)" LD=$$LD $(KERNEL_TARGET)
-ifeq ($(INCLUDE_PERF),1)
-	export PATH=$(KERNEL_COMPILER_PATHS):$(PATH) &&\
-	cd $(TOP)/kernel/tools/perf &&\
-	mkdir -p $(KERNEL_OUT)/tools/perf &&\
-	if [ -e $(KERNEL_TOOLS_PREFIX)ld.bfd ]; then LD=$(KERNEL_TOOLS_PREFIX)ld.bfd; else LD=$(KERNEL_TOOLS_PREFIX)ld; fi && \
-	$(MAKE) EXTRA_CFLAGS="$(TARGET_EXTRA_CFLAGS) $(LOCAL_CFLAGS) -isystem $(REALTOP)/bionic/libc/include -isystem $(REALTOP)/bionic/libc/kernel/common -isystem $(REALTOP)/bionic/libc/kernel/arch-arm -isystem $(REALTOP)/bionic/libc/arch-arm/include -I$(REALTOP)/external/elfutils/libelf -isystem $(REALTOP)/bionic/libm/include -isystem $(shell dirname $(KERNEL_TOOLS_PREFIX))/../include -I$(KERNEL_OUT)/tools/perf" BASIC_LDFLAGS="-nostdlib -Wl,-dynamic-linker,/system/bin/linker,-z,muldefs$(shell if test $(PLATFORM_SDK_VERSION) -lt 16; then echo -ne ',-T$(REALTOP)/$(BUILD_SYSTEM)/armelf.x'; fi),-z,nocopyreloc,--no-undefined -L$(REALTOP)/$(TARGET_OUT_STATIC_LIBRARIES) -L$(REALTOP)/$(PRODUCT_OUT)/system/lib -L$(REALTOP)/external/elfutils -L$(realpath $(PRODUCT_OUT))/obj/STATIC_LIBRARIES/libelf_intermediates -lpthread -lelf -lm -lc $(REALTOP)/$(TARGET_CRTBEGIN_DYNAMIC_O) $(REALTOP)/$(TARGET_CRTEND_O)" $(KERNEL_VERBOSE) O=$(KERNEL_OUT)/tools/perf/ OUTPUT=$(KERNEL_OUT)/tools/perf/ ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_TOOLS_PREFIX) LD=$$LD prefix=/system NO_DWARF=1 NO_NEWT=1 NO_LIBPERL=1 NO_LIBPYTHON=1 NO_GTK2=1 NO_STRLCPY=1 WERROR=0 && \
-	cp -f $(KERNEL_OUT)/tools/perf/perf $(REALTOP)/$(PRODUCT_OUT)/system/bin/
-endif
-ifeq ($(TARGET_PRODUCT), origen_quad)
-ifeq ($(USE_PREBUILT_UBOOT), true)
-	cp -f $(KERNEL_OUT)/arch/arm/boot/zImage $(REALTOP)/$(PRODUCT_OUT)/boot/
-endif
-endif
-
-android_kernel_modules: $(INSTALLED_KERNEL_TARGET) $(ACP)
-	export PATH=$(KERNEL_COMPILER_PATHS):$(PATH) &&\
-	cd $(TOP)/kernel &&\
-	if [ -e $(KERNEL_TOOLS_PREFIX)ld.bfd ]; then LD=$(KERNEL_TOOLS_PREFIX)ld.bfd; else LD=$(KERNEL_TOOLS_PREFIX)ld; fi && \
-	$(MAKE) $(KERNEL_VERBOSE) O=$(KERNEL_OUT) ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_TOOLS_PREFIX) LD=$$LD EXTRA_CFLAGS="$(EXTRA_CFLAGS) -fno-pic" KCFLAGS="$(TARGET_EXTRA_CFLAGS) -fno-pic $(LOCAL_CFLAGS)" modules
-	mkdir -p $(KERNEL_OUT)/modules_for_android
+android_kernel:
 	cd $(TOP)/kernel &&\
-	if [ -e $(KERNEL_TOOLS_PREFIX)ld.bfd ]; then LD=$(KERNEL_TOOLS_PREFIX)ld.bfd; else LD=$(KERNEL_TOOLS_PREFIX)ld; fi && \
-	$(MAKE) O=$(KERNEL_OUT) ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_TOOLS_PREFIX) KCFLAGS="$(TARGET_EXTRA_CFLAGS) -fno-pic $(LOCAL_CFLAGS)" LD=$$LD modules_install INSTALL_MOD_PATH=$(KERNEL_OUT)/modules_for_android
-	mkdir -p $(TARGET_OUT)/modules
-	find $(KERNEL_OUT)/modules_for_android -name "*.ko" -exec $(ACP) -fpt {} $(TARGET_OUT)/modules/ \;
-
-#NOTE: the gator driver's Makefile wasn't done properly and doesn't put build
-#      artifacts in the O=$(KERNEL_OUT)
-ifeq ($(TARGET_USE_GATOR),true)
-
-KERNEL_PATH:=$(shell pwd)/kernel
-
-ifneq ($(TARGET_GATOR_WITH_MALI_SUPPORT),)
-ifndef TARGET_MALI_DRIVER_DIR
-$(error TARGET_MALI_DRIVER_DIR must be defined if TARGET_GATOR_WITH_MALI_SUPPORT is.)
-endif
-GATOR_EXTRA_CFLAGS += -DMALI_SUPPORT=$(TARGET_GATOR_WITH_MALI_SUPPORT) -I$(KERNEL_PATH)/$(TARGET_MALI_DRIVER_DIR)
-GATOR_EXTRA_MAKE_ARGS += GATOR_WITH_MALI_SUPPORT=$(TARGET_GATOR_WITH_MALI_SUPPORT)
-endif
-
-ifneq ($(realpath $(TOP)/external/gator/driver),)
-gator_driver: android_kernel_modules $(INSTALLED_KERNEL_TARGET) $(ACP)
-	export PATH=$(KERNEL_COMPILER_PATHS):$(PATH) &&\
-	cd $(TOP)/external/gator/driver &&\
-	if [ -e $(KERNEL_TOOLS_PREFIX)ld.bfd ]; then LD=$(KERNEL_TOOLS_PREFIX)ld.bfd; else LD=$(KERNEL_TOOLS_PREFIX)ld; fi && \
-	$(MAKE) O=$(KERNEL_OUT) ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_TOOLS_PREFIX) LD=$$LD EXTRA_CFLAGS="$(EXTRA_CFLAGS) -fno-pic $(GATOR_EXTRA_CFLAGS)" KCFLAGS="$(TARGET_EXTRA_CFLAGS) -fno-pic $(LOCAL_CFLAGS)" $(GATOR_EXTRA_MAKE_ARGS) -C $(KERNEL_PATH) M=`pwd` modules
-	mkdir -p $(TARGET_OUT)/modules
-	find $(TOP)/external/gator/driver/. -name "*.ko" -exec $(ACP) -fpt {} $(TARGET_OUT)/modules/ \;
-else
-gator_driver:
-endif
-
-else
-gator_driver:
-endif
-
-ifeq ($(TARGET_USE_SGX),true)
-ifeq ($(TARGET_PRODUCT), beaglebone)
-sgx: android_kernel
-	cd $(TOP)/hardware/ti/sitara/sgx && \
-	$(MAKE) OMAPES=4.x TARGET_TOOLS_PREFIX=$(TARGET_TOOLS_PREFIX) TARGET_PRODUCT=beaglebone ANDROID_ROOT_DIR=$(REALTOP) clean && \
-	$(MAKE) OMAPES=4.x TARGET_TOOLS_PREFIX=$(TARGET_TOOLS_PREFIX) TARGET_PRODUCT=beaglebone ANDROID_ROOT_DIR=$(REALTOP) && \
-	$(MAKE) OMAPES=4.x TARGET_PRODUCT=beaglebone ANDROID_ROOT_DIR=$(REALTOP) install
-else
-sgx:
-endif
-else
-sgx:
-endif
-
-out_of_tree_modules: $(INSTALLED_KERNEL_TARGET) gator_driver sgx
-
-$(INSTALLED_KERNEL_TARGET): android_kernel
-	ln -sf $(KERNEL_OUT)/arch/$(ARCH)/boot/$(KERNEL_TARGET) $(INSTALLED_KERNEL_TARGET)
-
-$(INSTALLED_SYSTEMTARBALL_TARGET): android_kernel_modules out_of_tree_modules
-
-droidcore: android_kernel_modules out_of_tree_modules
-
-#
-# Generate a rule to build a device-tree.
-#
-# Usage: $(eval $(call MAKE_DEVICE_TREE, target-blob, source-name))
-#
-#   target-blob     Path and name for generated device tree blob
-#   source-name     Name of source in arch/arm/boot/dts/ without trailing '.dts'
-#
-#
-define MAKE_DEVICE_TREE
-
-$(1): $$(KERNEL_OUT)/arch/arm/boot/$(2).dtb $$(ACP)
-	@mkdir -p $$(dir $$@)
-	$$(ACP) -fpt $$< $$@
-
-DTB_TARGETS += $(2).dtb
-DTB_INSTALL_TARGETS += $(1)
-
-endef
-
-#
-# DEVICE_TREES contains a list of device-trees to build, each
-# entry in the list is in the form <source-name>:<blob-name>
-#
-DTB_TARGETS :=
-DTB_INSTALL_TARGETS :=
-$(foreach _ub,$(DEVICE_TREES),                             \
-    $(eval _source := $(call word-colon,1,$(_ub)))         \
-    $(eval _blob := $(call word-colon,2,$(_ub)))           \
-    $(eval _target := $(PRODUCT_OUT)/boot/$(_blob))        \
-    $(eval $(call MAKE_DEVICE_TREE,$(_target),$(_source))) \
-    )
-
-
-ifneq ($(strip $(DTB_TARGETS)),)
-
-.PHONY : all_dtbs
-all_dtbs : $(INSTALLED_KERNEL_TARGET)
-	export PATH=$(KERNEL_COMPILER_PATHS):$(PATH) &&\
-	cd $(TOP)/kernel && \
-	$(MAKE) O=$(KERNEL_OUT) ARCH=$(ARCH) CROSS_COMPILE=$(KERNEL_TOOLS_PREFIX) $(DTB_TARGETS)
-
-$(patsubst %,$(KERNEL_OUT)/arch/arm/boot/%,$(DTB_TARGETS)) : all_dtbs
-
-endif
-
-
-$(INSTALLED_BOOTTARBALL_TARGET): $(DTB_INSTALL_TARGETS)
+	make ARCH=arm CROSS_COMPILE=../$(TARGET_TOOLS_PREFIX) defconfig $(KERNEL_CONFIG) &&\
+	make ARCH=arm CROSS_COMPILE=../$(TARGET_TOOLS_PREFIX) uImage
 
-ifeq ($(TARGET_PRODUCT), vexpress_rtsm)
-bootwrapper: $(DTB_INSTALL_TARGETS)
-endif
+$(PRODUCT_OUT)/uImage: android_kernel
+	ln -sf ../../../../kernel/arch/arm/boot/uImage $(PRODUCT_OUT)/uImage
\ No newline at end of file
--- a/android/hardware/ti/omap4xxx/Android.mk
+++ b/android/hardware/ti/omap4xxx/Android.mk
@@ -1,5 +1,8 @@
 ifeq ($(TARGET_BOARD_PLATFORM),omap4)
 
+# only use the generic omap4 modules if no variant is declared
+ifeq ($(strip $(TARGET_BOARD_PLATFORM_VARIANT)),)
+
 LOCAL_PATH:= $(call my-dir)
 HARDWARE_TI_OMAP4_BASE:= $(LOCAL_PATH)
 OMAP4_DEBUG_MEMLEAK:= false
@@ -31,4 +34,6 @@
 endif
 
 include $(call first-makefiles-under,$(LOCAL_PATH))
-endif
+
+endif # ifeq ($(strip $(TARGET_BOARD_PLATFORM_VARIANT)),)
+endif # ifeq ($(TARGET_BOARD_PLATFORM),omap4)
--- a/android/hardware/ti/omap4xxx/security/tee_client_api/tee_client_api_linux_driver.c
+++ b/android/hardware/ti/omap4xxx/security/tee_client_api/tee_client_api_linux_driver.c
@@ -783,7 +783,7 @@
        */
        if (connectionData != NULL)
        {
-           memcpy(&sCommand.sOpenClientSession.sLoginData, &connectionData, sizeof(uint32_t)); //*(uint32_t*)sCommand.sOpenClientSession.sLoginData = *(uint32_t*)connectionData;
+           *(uint32_t*)sCommand.sOpenClientSession.sLoginData = *(uint32_t*)connectionData;
            sCommand.sHeader.nMessageSize += sizeof(uint32_t);
        }
    }
--- a/android/hardware/ti/omap4xxx/hwc/hwc.c
+++ b/android/hardware/ti/omap4xxx/hwc/hwc.c
@@ -2054,8 +2054,15 @@
         err = -errno;
         goto done;
     }
-    hwc_dev->ext.lcd_xpy = (float) hwc_dev->fb_dis.width_in_mm / hwc_dev->fb_dis.timings.x_res /
-                            hwc_dev->fb_dis.height_in_mm       * hwc_dev->fb_dis.timings.y_res;
+
+    if (hwc_dev->fb_dis.timings.x_res && hwc_dev->fb_dis.height_in_mm) {
+        hwc_dev->ext.lcd_xpy = (float)
+                hwc_dev->fb_dis.width_in_mm / hwc_dev->fb_dis.timings.x_res /
+                hwc_dev->fb_dis.height_in_mm * hwc_dev->fb_dis.timings.y_res;
+    } else {
+        ALOGE("x resolution or the height is not populated setting lcd_xpy to 1.0\n");
+        hwc_dev->ext.lcd_xpy = 1.0;
+    }
 
     if (pipe(hwc_dev->pipe_fds) == -1) {
             ALOGE("failed to event pipe (%d): %m", errno);
--- a/android/hardware/ti/omap4xxx/hwc/Android.mk
+++ b/android/hardware/ti/omap4xxx/hwc/Android.mk
@@ -14,7 +14,7 @@
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_MODULE := hwcomposer.omap4
-LOCAL_CFLAGS := -DLOG_TAG=\"ti_hwc\" -I$(LOCAL_PATH)/../kernel-headers
+LOCAL_CFLAGS := -DLOG_TAG=\"ti_hwc\"
 LOCAL_C_INCLUDES += external/libpng external/zlib
 # LOG_NDEBUG=0 means verbose logging enabled
 # LOCAL_CFLAGS += -DLOG_NDEBUG=0
--- a/android/hardware/ti/omap4xxx/camera/AppCallbackNotifier.cpp
+++ b/android/hardware/ti/omap4xxx/camera/AppCallbackNotifier.cpp
@@ -1061,13 +1061,13 @@
                                 void *y_uv[2];
                                 mapper.lock((buffer_handle_t)vBuf, CAMHAL_GRALLOC_USAGE, bounds, y_uv);
 
-                                structConvImage input =  {(int)frame->mWidth,
-                                                          (int)frame->mHeight,
+                                structConvImage input =  {frame->mWidth,
+                                                          frame->mHeight,
                                                           4096,
                                                           IC_FORMAT_YCbCr420_lp,
                                                           (mmByte *)frame->mYuv[0],
                                                           (mmByte *)frame->mYuv[1],
-                                                          (int)frame->mOffset};
+                                                          frame->mOffset};
 
                                 structConvImage output = {mVideoWidth,
                                                           mVideoHeight,
--- a/android/hardware/ti/omap4xxx/camera/CameraHalUtilClasses.cpp
+++ b/android/hardware/ti/omap4xxx/camera/CameraHalUtilClasses.cpp
@@ -117,15 +117,15 @@
 
 /*--------------------CameraArea Class STARTS here-----------------------------*/
 
-status_t CameraArea::transfrom(uint32_t width,
-                               uint32_t height,
-                               int32_t &top,
-                               int32_t &left,
-                               uint32_t &areaWidth,
-                               uint32_t &areaHeight)
+status_t CameraArea::transfrom(size_t width,
+                               size_t height,
+                               size_t &top,
+                               size_t &left,
+                               size_t &areaWidth,
+                               size_t &areaHeight)
 {
     status_t ret = NO_ERROR;
-    uint32_t hRange, vRange;
+    size_t hRange, vRange;
     double hScale, vScale;
 
     LOG_FUNCTION_NAME
@@ -147,11 +147,11 @@
     return ret;
 }
 
-status_t CameraArea::checkArea(int32_t top,
-                               int32_t left,
-                               int32_t bottom,
-                               int32_t right,
-                               int32_t weight)
+status_t CameraArea::checkArea(ssize_t top,
+                               ssize_t left,
+                               ssize_t bottom,
+                               ssize_t right,
+                               ssize_t weight)
 {
 
     //Handles the invalid regin corner case.
@@ -198,7 +198,7 @@
 }
 
 status_t CameraArea::parseAreas(const char *area,
-                                uint32_t areaLength,
+                                size_t areaLength,
                                 Vector< sp<CameraArea> > &areas)
 {
     status_t ret = NO_ERROR;
@@ -209,7 +209,7 @@
     const char *startToken = "(";
     const char endToken = ')';
     const char sep = ',';
-    int32_t top, left, bottom, right, weight;
+    ssize_t top, left, bottom, right, weight;
     char *tmpBuffer = NULL;
     sp<CameraArea> currentArea;
 
@@ -243,7 +243,7 @@
             }
         else
             {
-            left = static_cast<int32_t>(strtol(pStart, &pEnd, 10));
+            left = static_cast<ssize_t>(strtol(pStart, &pEnd, 10));
             }
 
         if ( sep != *pEnd )
@@ -254,7 +254,7 @@
             }
         else
             {
-            top = static_cast<int32_t>(strtol(pEnd+1, &pEnd, 10));
+            top = static_cast<ssize_t>(strtol(pEnd+1, &pEnd, 10));
             }
 
         if ( sep != *pEnd )
@@ -265,7 +265,7 @@
             }
         else
             {
-            right = static_cast<int32_t>(strtol(pEnd+1, &pEnd, 10));
+            right = static_cast<ssize_t>(strtol(pEnd+1, &pEnd, 10));
             }
 
         if ( sep != *pEnd )
@@ -276,7 +276,7 @@
             }
         else
             {
-            bottom = static_cast<int32_t>(strtol(pEnd+1, &pEnd, 10));
+            bottom = static_cast<ssize_t>(strtol(pEnd+1, &pEnd, 10));
             }
 
         if ( sep != *pEnd )
@@ -287,7 +287,7 @@
             }
         else
             {
-            weight = static_cast<int32_t>(strtol(pEnd+1, &pEnd, 10));
+            weight = static_cast<ssize_t>(strtol(pEnd+1, &pEnd, 10));
             }
 
         if ( endToken != *pEnd )
--- a/android/hardware/ti/omap4xxx/camera/inc/CameraHal.h
+++ b/android/hardware/ti/omap4xxx/camera/inc/CameraHal.h
@@ -130,27 +130,27 @@
 {
 public:
 
-    CameraArea(int32_t top,
-               int32_t left,
-               int32_t bottom,
-               int32_t right,
-               uint32_t weight) : mTop(top),
+    CameraArea(ssize_t top,
+               ssize_t left,
+               ssize_t bottom,
+               ssize_t right,
+               size_t weight) : mTop(top),
                                 mLeft(left),
                                 mBottom(bottom),
                                 mRight(right),
                                 mWeight(weight) {}
 
-    status_t transfrom(uint32_t width,
-                       uint32_t height,
-                       int32_t &top,
-                       int32_t &left,
-                       uint32_t &areaWidth,
-                       uint32_t &areaHeight);
+    status_t transfrom(size_t width,
+                       size_t height,
+                       size_t &top,
+                       size_t &left,
+                       size_t &areaWidth,
+                       size_t &areaHeight);
 
     bool isValid()
-    {
+        {
         return ( ( 0 != mTop ) || ( 0 != mLeft ) || ( 0 != mBottom ) || ( 0 != mRight) );
-    }
+        }
 
     bool isZeroArea()
     {
@@ -158,38 +158,38 @@
                  && ( 0 == mRight ) && ( 0 == mWeight ));
     }
 
-    uint32_t getWeight()
-    {
+    size_t getWeight()
+        {
         return mWeight;
-    }
+        }
 
     bool compare(const sp<CameraArea> &area);
 
     static status_t parseAreas(const char *area,
-                               uint32_t areaLength,
+                               size_t areaLength,
                                Vector< sp<CameraArea> > &areas);
 
-    static status_t checkArea(int32_t top,
-                              int32_t left,
-                              int32_t bottom,
-                              int32_t right,
-                              int32_t weight);
+    static status_t checkArea(ssize_t top,
+                              ssize_t left,
+                              ssize_t bottom,
+                              ssize_t right,
+                              ssize_t weight);
 
     static bool areAreasDifferent(Vector< sp<CameraArea> > &, Vector< sp<CameraArea> > &);
 
 protected:
-    static const int32_t TOP = -1000;
-    static const int32_t LEFT = -1000;
-    static const int32_t BOTTOM = 1000;
-    static const int32_t RIGHT = 1000;
-    static const int32_t WEIGHT_MIN = 1;
-    static const int32_t WEIGHT_MAX = 1000;
-
-    int32_t mTop;
-    int32_t mLeft;
-    int32_t mBottom;
-    int32_t mRight;
-    uint32_t mWeight;
+    static const ssize_t TOP = -1000;
+    static const ssize_t LEFT = -1000;
+    static const ssize_t BOTTOM = 1000;
+    static const ssize_t RIGHT = 1000;
+    static const ssize_t WEIGHT_MIN = 1;
+    static const ssize_t WEIGHT_MAX = 1000;
+
+    ssize_t mTop;
+    ssize_t mLeft;
+    ssize_t mBottom;
+    ssize_t mRight;
+    size_t mWeight;
 };
 
 class CameraFDResult : public RefBase
@@ -215,11 +215,11 @@
 
     camera_frame_metadata_t *getFaceResult() { return mFaceData; };
 
-    static const int32_t TOP = -1000;
-    static const int32_t LEFT = -1000;
-    static const int32_t BOTTOM = 1000;
-    static const int32_t RIGHT = 1000;
-    static const int32_t INVALID_DATA = -2000;
+    static const ssize_t TOP = -1000;
+    static const ssize_t LEFT = -1000;
+    static const ssize_t BOTTOM = 1000;
+    static const ssize_t RIGHT = 1000;
+    static const ssize_t INVALID_DATA = -2000;
 
 private:
 
@@ -300,7 +300,7 @@
     uint32_t mOffset;
     unsigned int mAlignment;
     int mFd;
-    uint32_t mLength;
+    size_t mLength;
     unsigned mFrameMask;
     unsigned int mQuirks;
     unsigned int mYuv[2];
@@ -359,11 +359,11 @@
     } ZoomEventData;
 
     typedef struct FaceData_t {
-        int32_t top;
-        int32_t left;
-        int32_t bottom;
-        int32_t right;
-        uint32_t score;
+        ssize_t top;
+        ssize_t left;
+        ssize_t bottom;
+        ssize_t right;
+        size_t score;
     } FaceData;
 
     typedef sp<CameraFDResult> FaceEventData;
@@ -545,7 +545,7 @@
     //All sub-components of Camera HAL call this whenever any error happens
     virtual void errorNotify(int error);
 
-    status_t startPreviewCallbacks(CameraParameters &params, void *buffers, uint32_t *offsets, int fd, uint32_t length, uint32_t count);
+    status_t startPreviewCallbacks(CameraParameters &params, void *buffers, uint32_t *offsets, int fd, size_t length, size_t count);
     status_t stopPreviewCallbacks();
 
     status_t enableMsgType(int32_t msgType);
@@ -577,7 +577,7 @@
     //Notifications from CameraHal for video recording case
     status_t startRecording();
     status_t stopRecording();
-    status_t initSharedVideoBuffers(void *buffers, uint32_t *offsets, int fd, uint32_t length, uint32_t count, void *vidBufs);
+    status_t initSharedVideoBuffers(void *buffers, uint32_t *offsets, int fd, size_t length, size_t count, void *vidBufs);
     status_t releaseRecordingFrame(const void *opaque);
 
 	status_t useMetaDataBufferMode(bool enable);
@@ -732,9 +732,9 @@
          void *mBuffers;
          uint32_t *mOffsets;
          int mFd;
-         uint32_t mLength;
-         uint32_t mCount;
-         uint32_t mMaxQueueable;
+         size_t mLength;
+         size_t mCount;
+         size_t mMaxQueueable;
         } BuffersDescriptor;
 
     enum CameraCommands
@@ -1110,7 +1110,7 @@
     void insertSupportedParams();
 
     /** Allocate preview data buffers */
-    status_t allocPreviewDataBufs(uint32_t size, uint32_t bufferCount);
+    status_t allocPreviewDataBufs(size_t size, size_t bufferCount);
 
     /** Free preview data buffers */
     status_t freePreviewDataBufs();
@@ -1122,7 +1122,7 @@
     status_t allocVideoBufs(uint32_t width, uint32_t height, uint32_t bufferCount);
 
     /** Allocate image capture buffers */
-    status_t allocImageBufs(unsigned int width, unsigned int height, uint32_t length, const char* previewFormat, unsigned int bufferCount);
+    status_t allocImageBufs(unsigned int width, unsigned int height, size_t length, const char* previewFormat, unsigned int bufferCount);
 
     /** Free preview buffers */
     status_t freePreviewBufs();
--- a/android/hardware/ti/omap4xxx/camera/OMXCameraAdapter/OMXFocus.cpp
+++ b/android/hardware/ti/omap4xxx/camera/OMXCameraAdapter/OMXFocus.cpp
@@ -729,12 +729,12 @@
         for ( unsigned int n = 0; n < mFocusAreas.size(); n++)
             {
             // transform the coordinates to 3A-type coordinates
-            mFocusAreas.itemAt(n)->transfrom(mPreviewData->mWidth,
-                                            mPreviewData->mHeight,
-                                            focusAreas[0]->tAlgoAreas[n].nTop,
-                                            focusAreas[0]->tAlgoAreas[n].nLeft,
-                                            focusAreas[0]->tAlgoAreas[n].nWidth,
-                                            focusAreas[0]->tAlgoAreas[n].nHeight);
+            mFocusAreas.itemAt(n)->transfrom((size_t)mPreviewData->mWidth,
+                                            (size_t)mPreviewData->mHeight,
+                                            (size_t&)focusAreas[0]->tAlgoAreas[n].nTop,
+                                            (size_t&)focusAreas[0]->tAlgoAreas[n].nLeft,
+                                            (size_t&)focusAreas[0]->tAlgoAreas[n].nWidth,
+                                            (size_t&)focusAreas[0]->tAlgoAreas[n].nHeight);
 
             focusAreas[0]->tAlgoAreas[n].nLeft =
                     ( focusAreas[0]->tAlgoAreas[n].nLeft * TOUCH_FOCUS_RANGE ) / mPreviewData->mWidth;
--- a/android/hardware/ti/omap4xxx/camera/OMXCameraAdapter/OMX3A.cpp
+++ b/android/hardware/ti/omap4xxx/camera/OMXCameraAdapter/OMX3A.cpp
@@ -1525,12 +1525,12 @@
   for ( unsigned int n = 0; n < mMeteringAreas.size(); n++)
       {
       // transform the coordinates to 3A-type coordinates
-      mMeteringAreas.itemAt(n)->transfrom(mPreviewData->mWidth,
-                                      mPreviewData->mHeight,
-                                      meteringAreas[0]->tAlgoAreas[n].nTop,
-                                      meteringAreas[0]->tAlgoAreas[n].nLeft,
-                                      meteringAreas[0]->tAlgoAreas[n].nWidth,
-                                      meteringAreas[0]->tAlgoAreas[n].nHeight);
+      mMeteringAreas.itemAt(n)->transfrom((size_t)mPreviewData->mWidth,
+                                      (size_t)mPreviewData->mHeight,
+                                      (size_t&)meteringAreas[0]->tAlgoAreas[n].nTop,
+                                      (size_t&)meteringAreas[0]->tAlgoAreas[n].nLeft,
+                                      (size_t&)meteringAreas[0]->tAlgoAreas[n].nWidth,
+                                      (size_t&)meteringAreas[0]->tAlgoAreas[n].nHeight);
 
       meteringAreas[0]->tAlgoAreas[n].nLeft =
               ( meteringAreas[0]->tAlgoAreas[n].nLeft * METERING_AREAS_RANGE ) / mPreviewData->mWidth;
--- a/android/hardware/ti/omap4xxx/domx/omx_core/inc/OMX_Types.h
+++ b/android/hardware/ti/omap4xxx/domx/omx_core/inc/OMX_Types.h
@@ -34,7 +34,6 @@
 #ifdef __cplusplus
 extern "C" {
 #endif /* __cplusplus */
-#include <stdint.h>
 
 /** The OMX_API and OMX_APIENTRY are platform specific definitions used
  *  to declare OMX function prototypes.  They are modified to meet the
@@ -131,22 +130,22 @@
   */ 
 
 /** OMX_U8 is an 8 bit unsigned quantity that is byte aligned */
-typedef uint8_t OMX_U8;
+typedef unsigned char OMX_U8;
 
 /** OMX_S8 is an 8 bit signed quantity that is byte aligned */
-typedef int8_t OMX_S8;
+typedef signed char OMX_S8;
 
 /** OMX_U16 is a 16 bit unsigned quantity that is 16 bit word aligned */
-typedef uint16_t OMX_U16;
+typedef unsigned short OMX_U16;
 
 /** OMX_S16 is a 16 bit signed quantity that is 16 bit word aligned */
-typedef int16_t OMX_S16;
+typedef signed short OMX_S16;
 
 /** OMX_U32 is a 32 bit unsigned quantity that is 32 bit word aligned */
-typedef uint32_t OMX_U32;
+typedef unsigned long OMX_U32;
 
 /** OMX_S32 is a 32 bit signed quantity that is 32 bit word aligned */
-typedef int32_t OMX_S32;
+typedef signed long OMX_S32;
 
 
 /* Users with compilers that cannot accept the "long long" designation should
